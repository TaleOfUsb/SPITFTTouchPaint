
R7_L31_SPITFTTouchPaint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004158  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021f0  0800431c  0800431c  0001431c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800650c  0800650c  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  0800650c  0800650c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006514  08006514  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006514  08006514  00016514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  0800651c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000048  08006564  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08006564  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010203  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027cd  00000000  00000000  0003027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00032a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000228bc  00000000  00000000  00033588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f9e4  00000000  00000000  00055e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cb6d1  00000000  00000000  00065828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00130ef9  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000a20  00000000  00000000  00130f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c94  00000000  00000000  00131970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000048 	.word	0x20000048
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004304 	.word	0x08004304

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	08004304 	.word	0x08004304

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_dmul>:
 8000214:	b570      	push	{r4, r5, r6, lr}
 8000216:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800021e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000222:	bf1d      	ittte	ne
 8000224:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000228:	ea94 0f0c 	teqne	r4, ip
 800022c:	ea95 0f0c 	teqne	r5, ip
 8000230:	f000 f8de 	bleq	80003f0 <__aeabi_dmul+0x1dc>
 8000234:	442c      	add	r4, r5
 8000236:	ea81 0603 	eor.w	r6, r1, r3
 800023a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800023e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000242:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000246:	bf18      	it	ne
 8000248:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800024c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000254:	d038      	beq.n	80002c8 <__aeabi_dmul+0xb4>
 8000256:	fba0 ce02 	umull	ip, lr, r0, r2
 800025a:	f04f 0500 	mov.w	r5, #0
 800025e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000262:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000266:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026a:	f04f 0600 	mov.w	r6, #0
 800026e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000272:	f09c 0f00 	teq	ip, #0
 8000276:	bf18      	it	ne
 8000278:	f04e 0e01 	orrne.w	lr, lr, #1
 800027c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000280:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000284:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000288:	d204      	bcs.n	8000294 <__aeabi_dmul+0x80>
 800028a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800028e:	416d      	adcs	r5, r5
 8000290:	eb46 0606 	adc.w	r6, r6, r6
 8000294:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000298:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800029c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002ac:	bf88      	it	hi
 80002ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b2:	d81e      	bhi.n	80002f2 <__aeabi_dmul+0xde>
 80002b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002b8:	bf08      	it	eq
 80002ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002be:	f150 0000 	adcs.w	r0, r0, #0
 80002c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c6:	bd70      	pop	{r4, r5, r6, pc}
 80002c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002cc:	ea46 0101 	orr.w	r1, r6, r1
 80002d0:	ea40 0002 	orr.w	r0, r0, r2
 80002d4:	ea81 0103 	eor.w	r1, r1, r3
 80002d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002dc:	bfc2      	ittt	gt
 80002de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002e6:	bd70      	popgt	{r4, r5, r6, pc}
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f04f 0e00 	mov.w	lr, #0
 80002f0:	3c01      	subs	r4, #1
 80002f2:	f300 80ab 	bgt.w	800044c <__aeabi_dmul+0x238>
 80002f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fa:	bfde      	ittt	le
 80002fc:	2000      	movle	r0, #0
 80002fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000302:	bd70      	pople	{r4, r5, r6, pc}
 8000304:	f1c4 0400 	rsb	r4, r4, #0
 8000308:	3c20      	subs	r4, #32
 800030a:	da35      	bge.n	8000378 <__aeabi_dmul+0x164>
 800030c:	340c      	adds	r4, #12
 800030e:	dc1b      	bgt.n	8000348 <__aeabi_dmul+0x134>
 8000310:	f104 0414 	add.w	r4, r4, #20
 8000314:	f1c4 0520 	rsb	r5, r4, #32
 8000318:	fa00 f305 	lsl.w	r3, r0, r5
 800031c:	fa20 f004 	lsr.w	r0, r0, r4
 8000320:	fa01 f205 	lsl.w	r2, r1, r5
 8000324:	ea40 0002 	orr.w	r0, r0, r2
 8000328:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800032c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	fa21 f604 	lsr.w	r6, r1, r4
 8000338:	eb42 0106 	adc.w	r1, r2, r6
 800033c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000340:	bf08      	it	eq
 8000342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f1c4 040c 	rsb	r4, r4, #12
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f304 	lsl.w	r3, r0, r4
 8000354:	fa20 f005 	lsr.w	r0, r0, r5
 8000358:	fa01 f204 	lsl.w	r2, r1, r4
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000370:	bf08      	it	eq
 8000372:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000376:	bd70      	pop	{r4, r5, r6, pc}
 8000378:	f1c4 0520 	rsb	r5, r4, #32
 800037c:	fa00 f205 	lsl.w	r2, r0, r5
 8000380:	ea4e 0e02 	orr.w	lr, lr, r2
 8000384:	fa20 f304 	lsr.w	r3, r0, r4
 8000388:	fa01 f205 	lsl.w	r2, r1, r5
 800038c:	ea43 0302 	orr.w	r3, r3, r2
 8000390:	fa21 f004 	lsr.w	r0, r1, r4
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	fa21 f204 	lsr.w	r2, r1, r4
 800039c:	ea20 0002 	bic.w	r0, r0, r2
 80003a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003a8:	bf08      	it	eq
 80003aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f094 0f00 	teq	r4, #0
 80003b4:	d10f      	bne.n	80003d6 <__aeabi_dmul+0x1c2>
 80003b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ba:	0040      	lsls	r0, r0, #1
 80003bc:	eb41 0101 	adc.w	r1, r1, r1
 80003c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c4:	bf08      	it	eq
 80003c6:	3c01      	subeq	r4, #1
 80003c8:	d0f7      	beq.n	80003ba <__aeabi_dmul+0x1a6>
 80003ca:	ea41 0106 	orr.w	r1, r1, r6
 80003ce:	f095 0f00 	teq	r5, #0
 80003d2:	bf18      	it	ne
 80003d4:	4770      	bxne	lr
 80003d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003da:	0052      	lsls	r2, r2, #1
 80003dc:	eb43 0303 	adc.w	r3, r3, r3
 80003e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e4:	bf08      	it	eq
 80003e6:	3d01      	subeq	r5, #1
 80003e8:	d0f7      	beq.n	80003da <__aeabi_dmul+0x1c6>
 80003ea:	ea43 0306 	orr.w	r3, r3, r6
 80003ee:	4770      	bx	lr
 80003f0:	ea94 0f0c 	teq	r4, ip
 80003f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003f8:	bf18      	it	ne
 80003fa:	ea95 0f0c 	teqne	r5, ip
 80003fe:	d00c      	beq.n	800041a <__aeabi_dmul+0x206>
 8000400:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000404:	bf18      	it	ne
 8000406:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040a:	d1d1      	bne.n	80003b0 <__aeabi_dmul+0x19c>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800041e:	bf06      	itte	eq
 8000420:	4610      	moveq	r0, r2
 8000422:	4619      	moveq	r1, r3
 8000424:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000428:	d019      	beq.n	800045e <__aeabi_dmul+0x24a>
 800042a:	ea94 0f0c 	teq	r4, ip
 800042e:	d102      	bne.n	8000436 <__aeabi_dmul+0x222>
 8000430:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000434:	d113      	bne.n	800045e <__aeabi_dmul+0x24a>
 8000436:	ea95 0f0c 	teq	r5, ip
 800043a:	d105      	bne.n	8000448 <__aeabi_dmul+0x234>
 800043c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000440:	bf1c      	itt	ne
 8000442:	4610      	movne	r0, r2
 8000444:	4619      	movne	r1, r3
 8000446:	d10a      	bne.n	800045e <__aeabi_dmul+0x24a>
 8000448:	ea81 0103 	eor.w	r1, r1, r3
 800044c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000450:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd70      	pop	{r4, r5, r6, pc}
 800045e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000462:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000466:	bd70      	pop	{r4, r5, r6, pc}

08000468 <__aeabi_drsub>:
 8000468:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e002      	b.n	8000474 <__adddf3>
 800046e:	bf00      	nop

08000470 <__aeabi_dsub>:
 8000470:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000474 <__adddf3>:
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800047e:	ea94 0f05 	teq	r4, r5
 8000482:	bf08      	it	eq
 8000484:	ea90 0f02 	teqeq	r0, r2
 8000488:	bf1f      	itttt	ne
 800048a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800048e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000492:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000496:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049a:	f000 80e2 	beq.w	8000662 <__adddf3+0x1ee>
 800049e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004a6:	bfb8      	it	lt
 80004a8:	426d      	neglt	r5, r5
 80004aa:	dd0c      	ble.n	80004c6 <__adddf3+0x52>
 80004ac:	442c      	add	r4, r5
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	ea82 0000 	eor.w	r0, r2, r0
 80004ba:	ea83 0101 	eor.w	r1, r3, r1
 80004be:	ea80 0202 	eor.w	r2, r0, r2
 80004c2:	ea81 0303 	eor.w	r3, r1, r3
 80004c6:	2d36      	cmp	r5, #54	; 0x36
 80004c8:	bf88      	it	hi
 80004ca:	bd30      	pophi	{r4, r5, pc}
 80004cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x70>
 80004de:	4240      	negs	r0, r0
 80004e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x84>
 80004f2:	4252      	negs	r2, r2
 80004f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004f8:	ea94 0f05 	teq	r4, r5
 80004fc:	f000 80a7 	beq.w	800064e <__adddf3+0x1da>
 8000500:	f1a4 0401 	sub.w	r4, r4, #1
 8000504:	f1d5 0e20 	rsbs	lr, r5, #32
 8000508:	db0d      	blt.n	8000526 <__adddf3+0xb2>
 800050a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800050e:	fa22 f205 	lsr.w	r2, r2, r5
 8000512:	1880      	adds	r0, r0, r2
 8000514:	f141 0100 	adc.w	r1, r1, #0
 8000518:	fa03 f20e 	lsl.w	r2, r3, lr
 800051c:	1880      	adds	r0, r0, r2
 800051e:	fa43 f305 	asr.w	r3, r3, r5
 8000522:	4159      	adcs	r1, r3
 8000524:	e00e      	b.n	8000544 <__adddf3+0xd0>
 8000526:	f1a5 0520 	sub.w	r5, r5, #32
 800052a:	f10e 0e20 	add.w	lr, lr, #32
 800052e:	2a01      	cmp	r2, #1
 8000530:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000534:	bf28      	it	cs
 8000536:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	18c0      	adds	r0, r0, r3
 8000540:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	d507      	bpl.n	800055a <__adddf3+0xe6>
 800054a:	f04f 0e00 	mov.w	lr, #0
 800054e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000552:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000556:	eb6e 0101 	sbc.w	r1, lr, r1
 800055a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800055e:	d31b      	bcc.n	8000598 <__adddf3+0x124>
 8000560:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000564:	d30c      	bcc.n	8000580 <__adddf3+0x10c>
 8000566:	0849      	lsrs	r1, r1, #1
 8000568:	ea5f 0030 	movs.w	r0, r0, rrx
 800056c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000570:	f104 0401 	add.w	r4, r4, #1
 8000574:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000578:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800057c:	f080 809a 	bcs.w	80006b4 <__adddf3+0x240>
 8000580:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000584:	bf08      	it	eq
 8000586:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058a:	f150 0000 	adcs.w	r0, r0, #0
 800058e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000592:	ea41 0105 	orr.w	r1, r1, r5
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800059c:	4140      	adcs	r0, r0
 800059e:	eb41 0101 	adc.w	r1, r1, r1
 80005a2:	3c01      	subs	r4, #1
 80005a4:	bf28      	it	cs
 80005a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005aa:	d2e9      	bcs.n	8000580 <__adddf3+0x10c>
 80005ac:	f091 0f00 	teq	r1, #0
 80005b0:	bf04      	itt	eq
 80005b2:	4601      	moveq	r1, r0
 80005b4:	2000      	moveq	r0, #0
 80005b6:	fab1 f381 	clz	r3, r1
 80005ba:	bf08      	it	eq
 80005bc:	3320      	addeq	r3, #32
 80005be:	f1a3 030b 	sub.w	r3, r3, #11
 80005c2:	f1b3 0220 	subs.w	r2, r3, #32
 80005c6:	da0c      	bge.n	80005e2 <__adddf3+0x16e>
 80005c8:	320c      	adds	r2, #12
 80005ca:	dd08      	ble.n	80005de <__adddf3+0x16a>
 80005cc:	f102 0c14 	add.w	ip, r2, #20
 80005d0:	f1c2 020c 	rsb	r2, r2, #12
 80005d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005d8:	fa21 f102 	lsr.w	r1, r1, r2
 80005dc:	e00c      	b.n	80005f8 <__adddf3+0x184>
 80005de:	f102 0214 	add.w	r2, r2, #20
 80005e2:	bfd8      	it	le
 80005e4:	f1c2 0c20 	rsble	ip, r2, #32
 80005e8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f0:	bfdc      	itt	le
 80005f2:	ea41 010c 	orrle.w	r1, r1, ip
 80005f6:	4090      	lslle	r0, r2
 80005f8:	1ae4      	subs	r4, r4, r3
 80005fa:	bfa2      	ittt	ge
 80005fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000600:	4329      	orrge	r1, r5
 8000602:	bd30      	popge	{r4, r5, pc}
 8000604:	ea6f 0404 	mvn.w	r4, r4
 8000608:	3c1f      	subs	r4, #31
 800060a:	da1c      	bge.n	8000646 <__adddf3+0x1d2>
 800060c:	340c      	adds	r4, #12
 800060e:	dc0e      	bgt.n	800062e <__adddf3+0x1ba>
 8000610:	f104 0414 	add.w	r4, r4, #20
 8000614:	f1c4 0220 	rsb	r2, r4, #32
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f302 	lsl.w	r3, r1, r2
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	fa21 f304 	lsr.w	r3, r1, r4
 8000628:	ea45 0103 	orr.w	r1, r5, r3
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	f1c4 040c 	rsb	r4, r4, #12
 8000632:	f1c4 0220 	rsb	r2, r4, #32
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 f304 	lsl.w	r3, r1, r4
 800063e:	ea40 0003 	orr.w	r0, r0, r3
 8000642:	4629      	mov	r1, r5
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	fa21 f004 	lsr.w	r0, r1, r4
 800064a:	4629      	mov	r1, r5
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	f094 0f00 	teq	r4, #0
 8000652:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000656:	bf06      	itte	eq
 8000658:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800065c:	3401      	addeq	r4, #1
 800065e:	3d01      	subne	r5, #1
 8000660:	e74e      	b.n	8000500 <__adddf3+0x8c>
 8000662:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000666:	bf18      	it	ne
 8000668:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800066c:	d029      	beq.n	80006c2 <__adddf3+0x24e>
 800066e:	ea94 0f05 	teq	r4, r5
 8000672:	bf08      	it	eq
 8000674:	ea90 0f02 	teqeq	r0, r2
 8000678:	d005      	beq.n	8000686 <__adddf3+0x212>
 800067a:	ea54 0c00 	orrs.w	ip, r4, r0
 800067e:	bf04      	itt	eq
 8000680:	4619      	moveq	r1, r3
 8000682:	4610      	moveq	r0, r2
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea91 0f03 	teq	r1, r3
 800068a:	bf1e      	ittt	ne
 800068c:	2100      	movne	r1, #0
 800068e:	2000      	movne	r0, #0
 8000690:	bd30      	popne	{r4, r5, pc}
 8000692:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000696:	d105      	bne.n	80006a4 <__adddf3+0x230>
 8000698:	0040      	lsls	r0, r0, #1
 800069a:	4149      	adcs	r1, r1
 800069c:	bf28      	it	cs
 800069e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a2:	bd30      	pop	{r4, r5, pc}
 80006a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006a8:	bf3c      	itt	cc
 80006aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ae:	bd30      	popcc	{r4, r5, pc}
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c6:	bf1a      	itte	ne
 80006c8:	4619      	movne	r1, r3
 80006ca:	4610      	movne	r0, r2
 80006cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d0:	bf1c      	itt	ne
 80006d2:	460b      	movne	r3, r1
 80006d4:	4602      	movne	r2, r0
 80006d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006da:	bf06      	itte	eq
 80006dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e0:	ea91 0f03 	teqeq	r1, r3
 80006e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	bf00      	nop

080006ec <__aeabi_ui2d>:
 80006ec:	f090 0f00 	teq	r0, #0
 80006f0:	bf04      	itt	eq
 80006f2:	2100      	moveq	r1, #0
 80006f4:	4770      	bxeq	lr
 80006f6:	b530      	push	{r4, r5, lr}
 80006f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000700:	f04f 0500 	mov.w	r5, #0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e750      	b.n	80005ac <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_i2d>:
 800070c:	f090 0f00 	teq	r0, #0
 8000710:	bf04      	itt	eq
 8000712:	2100      	moveq	r1, #0
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800071c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000720:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000724:	bf48      	it	mi
 8000726:	4240      	negmi	r0, r0
 8000728:	f04f 0100 	mov.w	r1, #0
 800072c:	e73e      	b.n	80005ac <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_f2d>:
 8000730:	0042      	lsls	r2, r0, #1
 8000732:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000736:	ea4f 0131 	mov.w	r1, r1, rrx
 800073a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800073e:	bf1f      	itttt	ne
 8000740:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000744:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000748:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800074c:	4770      	bxne	lr
 800074e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000752:	bf08      	it	eq
 8000754:	4770      	bxeq	lr
 8000756:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075a:	bf04      	itt	eq
 800075c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000768:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	e71c      	b.n	80005ac <__adddf3+0x138>
 8000772:	bf00      	nop

08000774 <__aeabi_ul2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f04f 0500 	mov.w	r5, #0
 8000782:	e00a      	b.n	800079a <__aeabi_l2d+0x16>

08000784 <__aeabi_l2d>:
 8000784:	ea50 0201 	orrs.w	r2, r0, r1
 8000788:	bf08      	it	eq
 800078a:	4770      	bxeq	lr
 800078c:	b530      	push	{r4, r5, lr}
 800078e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000792:	d502      	bpl.n	800079a <__aeabi_l2d+0x16>
 8000794:	4240      	negs	r0, r0
 8000796:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007a6:	f43f aed8 	beq.w	800055a <__adddf3+0xe6>
 80007aa:	f04f 0203 	mov.w	r2, #3
 80007ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b2:	bf18      	it	ne
 80007b4:	3203      	addne	r2, #3
 80007b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ba:	bf18      	it	ne
 80007bc:	3203      	addne	r2, #3
 80007be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ca:	fa20 f002 	lsr.w	r0, r0, r2
 80007ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d2:	ea40 000e 	orr.w	r0, r0, lr
 80007d6:	fa21 f102 	lsr.w	r1, r1, r2
 80007da:	4414      	add	r4, r2
 80007dc:	e6bd      	b.n	800055a <__adddf3+0xe6>
 80007de:	bf00      	nop

080007e0 <__aeabi_d2uiz>:
 80007e0:	004a      	lsls	r2, r1, #1
 80007e2:	d211      	bcs.n	8000808 <__aeabi_d2uiz+0x28>
 80007e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007e8:	d211      	bcs.n	800080e <__aeabi_d2uiz+0x2e>
 80007ea:	d50d      	bpl.n	8000808 <__aeabi_d2uiz+0x28>
 80007ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f4:	d40e      	bmi.n	8000814 <__aeabi_d2uiz+0x34>
 80007f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000802:	fa23 f002 	lsr.w	r0, r3, r2
 8000806:	4770      	bx	lr
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	4770      	bx	lr
 800080e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000812:	d102      	bne.n	800081a <__aeabi_d2uiz+0x3a>
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	4770      	bx	lr
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	4770      	bx	lr

08000820 <__aeabi_uldivmod>:
 8000820:	b953      	cbnz	r3, 8000838 <__aeabi_uldivmod+0x18>
 8000822:	b94a      	cbnz	r2, 8000838 <__aeabi_uldivmod+0x18>
 8000824:	2900      	cmp	r1, #0
 8000826:	bf08      	it	eq
 8000828:	2800      	cmpeq	r0, #0
 800082a:	bf1c      	itt	ne
 800082c:	f04f 31ff 	movne.w	r1, #4294967295
 8000830:	f04f 30ff 	movne.w	r0, #4294967295
 8000834:	f000 b96e 	b.w	8000b14 <__aeabi_idiv0>
 8000838:	f1ad 0c08 	sub.w	ip, sp, #8
 800083c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000840:	f000 f806 	bl	8000850 <__udivmoddi4>
 8000844:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084c:	b004      	add	sp, #16
 800084e:	4770      	bx	lr

08000850 <__udivmoddi4>:
 8000850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000854:	9d08      	ldr	r5, [sp, #32]
 8000856:	4604      	mov	r4, r0
 8000858:	468c      	mov	ip, r1
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 8083 	bne.w	8000966 <__udivmoddi4+0x116>
 8000860:	428a      	cmp	r2, r1
 8000862:	4617      	mov	r7, r2
 8000864:	d947      	bls.n	80008f6 <__udivmoddi4+0xa6>
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	b142      	cbz	r2, 800087e <__udivmoddi4+0x2e>
 800086c:	f1c2 0020 	rsb	r0, r2, #32
 8000870:	fa24 f000 	lsr.w	r0, r4, r0
 8000874:	4091      	lsls	r1, r2
 8000876:	4097      	lsls	r7, r2
 8000878:	ea40 0c01 	orr.w	ip, r0, r1
 800087c:	4094      	lsls	r4, r2
 800087e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000882:	0c23      	lsrs	r3, r4, #16
 8000884:	fbbc f6f8 	udiv	r6, ip, r8
 8000888:	fa1f fe87 	uxth.w	lr, r7
 800088c:	fb08 c116 	mls	r1, r8, r6, ip
 8000890:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000894:	fb06 f10e 	mul.w	r1, r6, lr
 8000898:	4299      	cmp	r1, r3
 800089a:	d909      	bls.n	80008b0 <__udivmoddi4+0x60>
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	f106 30ff 	add.w	r0, r6, #4294967295
 80008a2:	f080 8119 	bcs.w	8000ad8 <__udivmoddi4+0x288>
 80008a6:	4299      	cmp	r1, r3
 80008a8:	f240 8116 	bls.w	8000ad8 <__udivmoddi4+0x288>
 80008ac:	3e02      	subs	r6, #2
 80008ae:	443b      	add	r3, r7
 80008b0:	1a5b      	subs	r3, r3, r1
 80008b2:	b2a4      	uxth	r4, r4
 80008b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b8:	fb08 3310 	mls	r3, r8, r0, r3
 80008bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008c4:	45a6      	cmp	lr, r4
 80008c6:	d909      	bls.n	80008dc <__udivmoddi4+0x8c>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ce:	f080 8105 	bcs.w	8000adc <__udivmoddi4+0x28c>
 80008d2:	45a6      	cmp	lr, r4
 80008d4:	f240 8102 	bls.w	8000adc <__udivmoddi4+0x28c>
 80008d8:	3802      	subs	r0, #2
 80008da:	443c      	add	r4, r7
 80008dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008e0:	eba4 040e 	sub.w	r4, r4, lr
 80008e4:	2600      	movs	r6, #0
 80008e6:	b11d      	cbz	r5, 80008f0 <__udivmoddi4+0xa0>
 80008e8:	40d4      	lsrs	r4, r2
 80008ea:	2300      	movs	r3, #0
 80008ec:	e9c5 4300 	strd	r4, r3, [r5]
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xaa>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f282 	clz	r2, r2
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d150      	bne.n	80009a4 <__udivmoddi4+0x154>
 8000902:	1bcb      	subs	r3, r1, r7
 8000904:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000908:	fa1f f887 	uxth.w	r8, r7
 800090c:	2601      	movs	r6, #1
 800090e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000912:	0c21      	lsrs	r1, r4, #16
 8000914:	fb0e 331c 	mls	r3, lr, ip, r3
 8000918:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800091c:	fb08 f30c 	mul.w	r3, r8, ip
 8000920:	428b      	cmp	r3, r1
 8000922:	d907      	bls.n	8000934 <__udivmoddi4+0xe4>
 8000924:	1879      	adds	r1, r7, r1
 8000926:	f10c 30ff 	add.w	r0, ip, #4294967295
 800092a:	d202      	bcs.n	8000932 <__udivmoddi4+0xe2>
 800092c:	428b      	cmp	r3, r1
 800092e:	f200 80e9 	bhi.w	8000b04 <__udivmoddi4+0x2b4>
 8000932:	4684      	mov	ip, r0
 8000934:	1ac9      	subs	r1, r1, r3
 8000936:	b2a3      	uxth	r3, r4
 8000938:	fbb1 f0fe 	udiv	r0, r1, lr
 800093c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000940:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000944:	fb08 f800 	mul.w	r8, r8, r0
 8000948:	45a0      	cmp	r8, r4
 800094a:	d907      	bls.n	800095c <__udivmoddi4+0x10c>
 800094c:	193c      	adds	r4, r7, r4
 800094e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x10a>
 8000954:	45a0      	cmp	r8, r4
 8000956:	f200 80d9 	bhi.w	8000b0c <__udivmoddi4+0x2bc>
 800095a:	4618      	mov	r0, r3
 800095c:	eba4 0408 	sub.w	r4, r4, r8
 8000960:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000964:	e7bf      	b.n	80008e6 <__udivmoddi4+0x96>
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0x12e>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80b1 	beq.w	8000ad2 <__udivmoddi4+0x282>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x1cc>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0x140>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80b8 	bhi.w	8000b00 <__udivmoddi4+0x2b0>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0103 	sbc.w	r1, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	468c      	mov	ip, r1
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0a8      	beq.n	80008f0 <__udivmoddi4+0xa0>
 800099e:	e9c5 4c00 	strd	r4, ip, [r5]
 80009a2:	e7a5      	b.n	80008f0 <__udivmoddi4+0xa0>
 80009a4:	f1c2 0320 	rsb	r3, r2, #32
 80009a8:	fa20 f603 	lsr.w	r6, r0, r3
 80009ac:	4097      	lsls	r7, r2
 80009ae:	fa01 f002 	lsl.w	r0, r1, r2
 80009b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b6:	40d9      	lsrs	r1, r3
 80009b8:	4330      	orrs	r0, r6
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80009c0:	fa1f f887 	uxth.w	r8, r7
 80009c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80009c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009cc:	fb06 f108 	mul.w	r1, r6, r8
 80009d0:	4299      	cmp	r1, r3
 80009d2:	fa04 f402 	lsl.w	r4, r4, r2
 80009d6:	d909      	bls.n	80009ec <__udivmoddi4+0x19c>
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	f106 3cff 	add.w	ip, r6, #4294967295
 80009de:	f080 808d 	bcs.w	8000afc <__udivmoddi4+0x2ac>
 80009e2:	4299      	cmp	r1, r3
 80009e4:	f240 808a 	bls.w	8000afc <__udivmoddi4+0x2ac>
 80009e8:	3e02      	subs	r6, #2
 80009ea:	443b      	add	r3, r7
 80009ec:	1a5b      	subs	r3, r3, r1
 80009ee:	b281      	uxth	r1, r0
 80009f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80009f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009fc:	fb00 f308 	mul.w	r3, r0, r8
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d907      	bls.n	8000a14 <__udivmoddi4+0x1c4>
 8000a04:	1879      	adds	r1, r7, r1
 8000a06:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a0a:	d273      	bcs.n	8000af4 <__udivmoddi4+0x2a4>
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d971      	bls.n	8000af4 <__udivmoddi4+0x2a4>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4439      	add	r1, r7
 8000a14:	1acb      	subs	r3, r1, r3
 8000a16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a1a:	e778      	b.n	800090e <__udivmoddi4+0xbe>
 8000a1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000a20:	fa03 f406 	lsl.w	r4, r3, r6
 8000a24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a28:	431c      	orrs	r4, r3
 8000a2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a3a:	431f      	orrs	r7, r3
 8000a3c:	0c3b      	lsrs	r3, r7, #16
 8000a3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a42:	fa1f f884 	uxth.w	r8, r4
 8000a46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000a52:	458a      	cmp	sl, r1
 8000a54:	fa02 f206 	lsl.w	r2, r2, r6
 8000a58:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x220>
 8000a5e:	1861      	adds	r1, r4, r1
 8000a60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a64:	d248      	bcs.n	8000af8 <__udivmoddi4+0x2a8>
 8000a66:	458a      	cmp	sl, r1
 8000a68:	d946      	bls.n	8000af8 <__udivmoddi4+0x2a8>
 8000a6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000a6e:	4421      	add	r1, r4
 8000a70:	eba1 010a 	sub.w	r1, r1, sl
 8000a74:	b2bf      	uxth	r7, r7
 8000a76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a82:	fb00 f808 	mul.w	r8, r0, r8
 8000a86:	45b8      	cmp	r8, r7
 8000a88:	d907      	bls.n	8000a9a <__udivmoddi4+0x24a>
 8000a8a:	19e7      	adds	r7, r4, r7
 8000a8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a90:	d22e      	bcs.n	8000af0 <__udivmoddi4+0x2a0>
 8000a92:	45b8      	cmp	r8, r7
 8000a94:	d92c      	bls.n	8000af0 <__udivmoddi4+0x2a0>
 8000a96:	3802      	subs	r0, #2
 8000a98:	4427      	add	r7, r4
 8000a9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a9e:	eba7 0708 	sub.w	r7, r7, r8
 8000aa2:	fba0 8902 	umull	r8, r9, r0, r2
 8000aa6:	454f      	cmp	r7, r9
 8000aa8:	46c6      	mov	lr, r8
 8000aaa:	4649      	mov	r1, r9
 8000aac:	d31a      	bcc.n	8000ae4 <__udivmoddi4+0x294>
 8000aae:	d017      	beq.n	8000ae0 <__udivmoddi4+0x290>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x27a>
 8000ab2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ab6:	eb67 0701 	sbc.w	r7, r7, r1
 8000aba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000abe:	40f2      	lsrs	r2, r6
 8000ac0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ac4:	40f7      	lsrs	r7, r6
 8000ac6:	e9c5 2700 	strd	r2, r7, [r5]
 8000aca:	2600      	movs	r6, #0
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	462e      	mov	r6, r5
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	e70b      	b.n	80008f0 <__udivmoddi4+0xa0>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	e6e9      	b.n	80008b0 <__udivmoddi4+0x60>
 8000adc:	4618      	mov	r0, r3
 8000ade:	e6fd      	b.n	80008dc <__udivmoddi4+0x8c>
 8000ae0:	4543      	cmp	r3, r8
 8000ae2:	d2e5      	bcs.n	8000ab0 <__udivmoddi4+0x260>
 8000ae4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ae8:	eb69 0104 	sbc.w	r1, r9, r4
 8000aec:	3801      	subs	r0, #1
 8000aee:	e7df      	b.n	8000ab0 <__udivmoddi4+0x260>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e7d2      	b.n	8000a9a <__udivmoddi4+0x24a>
 8000af4:	4660      	mov	r0, ip
 8000af6:	e78d      	b.n	8000a14 <__udivmoddi4+0x1c4>
 8000af8:	4681      	mov	r9, r0
 8000afa:	e7b9      	b.n	8000a70 <__udivmoddi4+0x220>
 8000afc:	4666      	mov	r6, ip
 8000afe:	e775      	b.n	80009ec <__udivmoddi4+0x19c>
 8000b00:	4630      	mov	r0, r6
 8000b02:	e74a      	b.n	800099a <__udivmoddi4+0x14a>
 8000b04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b08:	4439      	add	r1, r7
 8000b0a:	e713      	b.n	8000934 <__udivmoddi4+0xe4>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	443c      	add	r4, r7
 8000b10:	e724      	b.n	800095c <__udivmoddi4+0x10c>
 8000b12:	bf00      	nop

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <GFX_SetFont+0x1c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000080 	.word	0x20000080

08000b38 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, ColorType color)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000b50:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	1acb      	subs	r3, r1, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	429a      	cmp	r2, r3
 8000b62:	bfcc      	ite	gt
 8000b64:	2301      	movgt	r3, #1
 8000b66:	2300      	movle	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000b6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dd0b      	ble.n	8000bac <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bfb8      	it	lt
 8000bc4:	425b      	neglt	r3, r3
 8000bc6:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000bc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bcc:	0fda      	lsrs	r2, r3, #31
 8000bce:	4413      	add	r3, r2
 8000bd0:	105b      	asrs	r3, r3, #1
 8000bd2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	da02      	bge.n	8000be2 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000be0:	e02e      	b.n	8000c40 <GFX_WriteLine+0x108>
	    } else {
	        ystep = -1;
 8000be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000be8:	e02a      	b.n	8000c40 <GFX_WriteLine+0x108>
	        if (steep) {
 8000bea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d008      	beq.n	8000c04 <GFX_WriteLine+0xcc>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	b211      	sxth	r1, r2
 8000bfa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fd06 	bl	800160e <ILI9341_WritePixel>
 8000c02:	e007      	b.n	8000c14 <GFX_WriteLine+0xdc>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	b211      	sxth	r1, r2
 8000c0c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fcfd 	bl	800160e <ILI9341_WritePixel>
	        }
	        err -= dy;
 8000c14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c16:	8abb      	ldrh	r3, [r7, #20]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8000c1e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	da09      	bge.n	8000c3a <GFX_WriteLine+0x102>
	            y_start += ystep;
 8000c26:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000c30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c32:	8afb      	ldrh	r3, [r7, #22]
 8000c34:	4413      	add	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	ddd0      	ble.n	8000bea <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, ColorType color)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af02      	add	r7, sp, #8
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f7ff ff60 	bl	8000b38 <GFX_WriteLine>
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, ColorType color)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af02      	add	r7, sp, #8
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	807b      	strh	r3, [r7, #2]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f7ff ff4a 	bl	8000b38 <GFX_WriteLine>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	460b      	mov	r3, r1
 8000cbc:	80fb      	strh	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	8b3b      	ldrh	r3, [r7, #24]
 8000cc6:	68b9      	ldr	r1, [r7, #8]
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ffd9 	bl	8000c80 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8000cce:	88ba      	ldrh	r2, [r7, #4]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	1e59      	subs	r1, r3, #1
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	8b3b      	ldrh	r3, [r7, #24]
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f7ff ffd0 	bl	8000c80 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8000ce0:	88ba      	ldrh	r2, [r7, #4]
 8000ce2:	8b3b      	ldrh	r3, [r7, #24]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff ffb3 	bl	8000c52 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	1e58      	subs	r0, r3, #1
 8000cf4:	88ba      	ldrh	r2, [r7, #4]
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	f7ff ffaa 	bl	8000c52 <GFX_DrawFastVLine>

}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, ColorType color)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	4611      	mov	r1, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	460b      	mov	r3, r1
 8000d16:	80fb      	strh	r3, [r7, #6]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e008      	b.n	8000d34 <GFX_DrawFillRectangle+0x2e>
    	GFX_DrawFastVLine(i, y, h, color);
 8000d22:	88ba      	ldrh	r2, [r7, #4]
 8000d24:	8c3b      	ldrh	r3, [r7, #32]
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	6978      	ldr	r0, [r7, #20]
 8000d2a:	f7ff ff92 	bl	8000c52 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3301      	adds	r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	88fa      	ldrh	r2, [r7, #6]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf0      	blt.n	8000d22 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, ColorType color)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b088      	sub	sp, #32
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	4611      	mov	r1, r2
 8000d56:	461a      	mov	r2, r3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	80fb      	strh	r3, [r7, #6]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	f1c3 0301 	rsb	r3, r3, #1
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	461a      	mov	r2, r3
 8000d72:	03d2      	lsls	r2, r2, #15
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8000d84:	e073      	b.n	8000e6e <GFX_DrawFillCircleHelper+0x124>
        if (f >= 0) {
 8000d86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0e      	blt.n	8000dac <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000d8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3b01      	subs	r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000d9a:	8b7b      	ldrh	r3, [r7, #26]
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000da2:	8bfa      	ldrh	r2, [r7, #30]
 8000da4:	8b7b      	ldrh	r3, [r7, #26]
 8000da6:	4413      	add	r3, r2
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000dac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000db8:	8bbb      	ldrh	r3, [r7, #28]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8000dc0:	8bfa      	ldrh	r2, [r7, #30]
 8000dc2:	8bbb      	ldrh	r3, [r7, #28]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000dca:	797b      	ldrb	r3, [r7, #5]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d023      	beq.n	8000e1c <GFX_DrawFillCircleHelper+0xd2>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8000dd4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	18d0      	adds	r0, r2, r3
 8000ddc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	1ad1      	subs	r1, r2, r3
 8000de4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000df0:	441a      	add	r2, r3
 8000df2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000df4:	f7ff ff2d 	bl	8000c52 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8000df8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	18d0      	adds	r0, r2, r3
 8000e00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	1ad1      	subs	r1, r2, r3
 8000e08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000e14:	441a      	add	r2, r3
 8000e16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e18:	f7ff ff1b 	bl	8000c52 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d023      	beq.n	8000e6e <GFX_DrawFillCircleHelper+0x124>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8000e26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	1ad0      	subs	r0, r2, r3
 8000e2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	1ad1      	subs	r1, r2, r3
 8000e36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000e42:	441a      	add	r2, r3
 8000e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e46:	f7ff ff04 	bl	8000c52 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000e4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	1ad0      	subs	r0, r2, r3
 8000e52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	1ad1      	subs	r1, r2, r3
 8000e5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000e66:	441a      	add	r2, r3
 8000e68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e6a:	f7ff fef2 	bl	8000c52 <GFX_DrawFastVLine>
    while (x<y) {
 8000e6e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	db85      	blt.n	8000d86 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, ColorType color)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	80fb      	strh	r3, [r7, #6]
 8000e96:	4613      	mov	r3, r2
 8000e98:	80bb      	strh	r3, [r7, #4]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	1ad1      	subs	r1, r2, r3
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff fed2 	bl	8000c52 <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 8000eae:	88fa      	ldrh	r2, [r7, #6]
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2303      	movs	r3, #3
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff ff44 	bl	8000d4a <GFX_DrawFillCircleHelper>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <EF_SetFont>:
#include "string.h"

const FONT_INFO *CurrentFont;

void EF_SetFont(const FONT_INFO *Font)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	CurrentFont = Font;
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <EF_SetFont+0x1c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000084 	.word	0x20000084

08000eec <EF_GetFontHeight>:

uint8_t EF_GetFontHeight(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
	return CurrentFont->CharHeight;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <EF_GetFontHeight+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20000084 	.word	0x20000084

08000f04 <EF_GetFontStartChar>:

uint8_t EF_GetFontStartChar(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	return CurrentFont->StartChar;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <EF_GetFontStartChar+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	785b      	ldrb	r3, [r3, #1]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	20000084 	.word	0x20000084

08000f1c <EF_GetFontEndChar>:

uint8_t EF_GetFontEndChar(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
	return CurrentFont->EndChar;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <EF_GetFontEndChar+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	789b      	ldrb	r3, [r3, #2]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000084 	.word	0x20000084

08000f34 <EF_GetFontSpaceWidth>:

uint8_t EF_GetFontSpaceWidth(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	return CurrentFont->SpaceWidth;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <EF_GetFontSpaceWidth+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	78db      	ldrb	r3, [r3, #3]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20000084 	.word	0x20000084

08000f4c <EF_DecodePolish>:

char EF_DecodePolish(uint8_t chMsb, uint8_t chLsb)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
	switch(chMsb) // Check first byte
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2bc5      	cmp	r3, #197	; 0xc5
 8000f60:	d052      	beq.n	8001008 <EF_DecodePolish+0xbc>
 8000f62:	2bc5      	cmp	r3, #197	; 0xc5
 8000f64:	f300 80e7 	bgt.w	8001136 <EF_DecodePolish+0x1ea>
 8000f68:	2bc3      	cmp	r3, #195	; 0xc3
 8000f6a:	d002      	beq.n	8000f72 <EF_DecodePolish+0x26>
 8000f6c:	2bc4      	cmp	r3, #196	; 0xc4
 8000f6e:	d00a      	beq.n	8000f86 <EF_DecodePolish+0x3a>
 8000f70:	e0e1      	b.n	8001136 <EF_DecodePolish+0x1ea>
	{
	case 0xC3: // Ó, ó
		switch(chLsb) // Check second byte
 8000f72:	79bb      	ldrb	r3, [r7, #6]
 8000f74:	2b93      	cmp	r3, #147	; 0x93
 8000f76:	d002      	beq.n	8000f7e <EF_DecodePolish+0x32>
 8000f78:	2bb3      	cmp	r3, #179	; 0xb3
 8000f7a:	d002      	beq.n	8000f82 <EF_DecodePolish+0x36>
			break;
		case 0xB3: // ó
			return 0x8D;
			break;
		}
		break;
 8000f7c:	e0db      	b.n	8001136 <EF_DecodePolish+0x1ea>
			return 0x84;
 8000f7e:	2384      	movs	r3, #132	; 0x84
 8000f80:	e0da      	b.n	8001138 <EF_DecodePolish+0x1ec>
			return 0x8D;
 8000f82:	238d      	movs	r3, #141	; 0x8d
 8000f84:	e0d8      	b.n	8001138 <EF_DecodePolish+0x1ec>
	case 0xC4: // Ą, Ę, Ć, ą, ę, ć
		switch(chLsb) // Check second byte
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	3b84      	subs	r3, #132	; 0x84
 8000f8a:	2b15      	cmp	r3, #21
 8000f8c:	f200 80d0 	bhi.w	8001130 <EF_DecodePolish+0x1e4>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <EF_DecodePolish+0x4c>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000ff1 	.word	0x08000ff1
 8000f9c:	08000ffd 	.word	0x08000ffd
 8000fa0:	08000ff9 	.word	0x08000ff9
 8000fa4:	08001005 	.word	0x08001005
 8000fa8:	08001131 	.word	0x08001131
 8000fac:	08001131 	.word	0x08001131
 8000fb0:	08001131 	.word	0x08001131
 8000fb4:	08001131 	.word	0x08001131
 8000fb8:	08001131 	.word	0x08001131
 8000fbc:	08001131 	.word	0x08001131
 8000fc0:	08001131 	.word	0x08001131
 8000fc4:	08001131 	.word	0x08001131
 8000fc8:	08001131 	.word	0x08001131
 8000fcc:	08001131 	.word	0x08001131
 8000fd0:	08001131 	.word	0x08001131
 8000fd4:	08001131 	.word	0x08001131
 8000fd8:	08001131 	.word	0x08001131
 8000fdc:	08001131 	.word	0x08001131
 8000fe0:	08001131 	.word	0x08001131
 8000fe4:	08001131 	.word	0x08001131
 8000fe8:	08000ff5 	.word	0x08000ff5
 8000fec:	08001001 	.word	0x08001001
		{
		case 0x84: // Ą
			return 0x7F;
 8000ff0:	237f      	movs	r3, #127	; 0x7f
 8000ff2:	e0a1      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x98: // Ę
			return 0x81;
 8000ff4:	2381      	movs	r3, #129	; 0x81
 8000ff6:	e09f      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x86: // Ć
			return 0x80;
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	e09d      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x85: // ą
			return 0x88;
 8000ffc:	2388      	movs	r3, #136	; 0x88
 8000ffe:	e09b      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x99: // ę
			return 0x8A;
 8001000:	238a      	movs	r3, #138	; 0x8a
 8001002:	e099      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x87: // ć
			return 0x89;
 8001004:	2389      	movs	r3, #137	; 0x89
 8001006:	e097      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		}
		break;
	case 0xC5: // Ł, Ń, Ś, Ź, Ż, ł, ń, ś, ź, ż
		switch(chLsb) // Check second byte
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	3b81      	subs	r3, #129	; 0x81
 800100c:	2b3b      	cmp	r3, #59	; 0x3b
 800100e:	f200 8091 	bhi.w	8001134 <EF_DecodePolish+0x1e8>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <EF_DecodePolish+0xcc>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001109 	.word	0x08001109
 800101c:	0800111d 	.word	0x0800111d
 8001020:	0800110d 	.word	0x0800110d
 8001024:	08001121 	.word	0x08001121
 8001028:	08001135 	.word	0x08001135
 800102c:	08001135 	.word	0x08001135
 8001030:	08001135 	.word	0x08001135
 8001034:	08001135 	.word	0x08001135
 8001038:	08001135 	.word	0x08001135
 800103c:	08001135 	.word	0x08001135
 8001040:	08001135 	.word	0x08001135
 8001044:	08001135 	.word	0x08001135
 8001048:	08001135 	.word	0x08001135
 800104c:	08001135 	.word	0x08001135
 8001050:	08001135 	.word	0x08001135
 8001054:	08001135 	.word	0x08001135
 8001058:	08001135 	.word	0x08001135
 800105c:	08001135 	.word	0x08001135
 8001060:	08001135 	.word	0x08001135
 8001064:	08001135 	.word	0x08001135
 8001068:	08001135 	.word	0x08001135
 800106c:	08001135 	.word	0x08001135
 8001070:	08001135 	.word	0x08001135
 8001074:	08001135 	.word	0x08001135
 8001078:	08001135 	.word	0x08001135
 800107c:	08001111 	.word	0x08001111
 8001080:	08001125 	.word	0x08001125
 8001084:	08001135 	.word	0x08001135
 8001088:	08001135 	.word	0x08001135
 800108c:	08001135 	.word	0x08001135
 8001090:	08001135 	.word	0x08001135
 8001094:	08001135 	.word	0x08001135
 8001098:	08001135 	.word	0x08001135
 800109c:	08001135 	.word	0x08001135
 80010a0:	08001135 	.word	0x08001135
 80010a4:	08001135 	.word	0x08001135
 80010a8:	08001135 	.word	0x08001135
 80010ac:	08001135 	.word	0x08001135
 80010b0:	08001135 	.word	0x08001135
 80010b4:	08001135 	.word	0x08001135
 80010b8:	08001135 	.word	0x08001135
 80010bc:	08001135 	.word	0x08001135
 80010c0:	08001135 	.word	0x08001135
 80010c4:	08001135 	.word	0x08001135
 80010c8:	08001135 	.word	0x08001135
 80010cc:	08001135 	.word	0x08001135
 80010d0:	08001135 	.word	0x08001135
 80010d4:	08001135 	.word	0x08001135
 80010d8:	08001135 	.word	0x08001135
 80010dc:	08001135 	.word	0x08001135
 80010e0:	08001135 	.word	0x08001135
 80010e4:	08001135 	.word	0x08001135
 80010e8:	08001135 	.word	0x08001135
 80010ec:	08001135 	.word	0x08001135
 80010f0:	08001135 	.word	0x08001135
 80010f4:	08001135 	.word	0x08001135
 80010f8:	08001115 	.word	0x08001115
 80010fc:	08001129 	.word	0x08001129
 8001100:	08001119 	.word	0x08001119
 8001104:	0800112d 	.word	0x0800112d
		{
		case 0x81: // Ł
			return 0x82;
 8001108:	2382      	movs	r3, #130	; 0x82
 800110a:	e015      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x83: // Ń
			return 0x83;
 800110c:	2383      	movs	r3, #131	; 0x83
 800110e:	e013      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x9A: // Ś
			return 0x85;
 8001110:	2385      	movs	r3, #133	; 0x85
 8001112:	e011      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0xB9: // Ź
			return 0x86;
 8001114:	2386      	movs	r3, #134	; 0x86
 8001116:	e00f      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0xBB: // Ż
			return 0x87;
 8001118:	2387      	movs	r3, #135	; 0x87
 800111a:	e00d      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x82: // ł
			return 0x8B;
 800111c:	238b      	movs	r3, #139	; 0x8b
 800111e:	e00b      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x84: // ń
			return 0x8C;
 8001120:	238c      	movs	r3, #140	; 0x8c
 8001122:	e009      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0x9B: // ś
			return 0x8E;
 8001124:	238e      	movs	r3, #142	; 0x8e
 8001126:	e007      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0xBA: // ź
			return 0x8F;
 8001128:	238f      	movs	r3, #143	; 0x8f
 800112a:	e005      	b.n	8001138 <EF_DecodePolish+0x1ec>
			break;
		case 0xBC: // ż
			return 0x90;
 800112c:	2390      	movs	r3, #144	; 0x90
 800112e:	e003      	b.n	8001138 <EF_DecodePolish+0x1ec>
		break;
 8001130:	bf00      	nop
 8001132:	e000      	b.n	8001136 <EF_DecodePolish+0x1ea>
			break;
		}
		break;
 8001134:	bf00      	nop
	}

	return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <EF_PutChar>:

uint8_t EF_PutChar(char ch, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af02      	add	r7, sp, #8
 800114a:	4604      	mov	r4, r0
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	461a      	mov	r2, r3
 8001152:	4623      	mov	r3, r4
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	4603      	mov	r3, r0
 8001158:	80bb      	strh	r3, [r7, #4]
 800115a:	460b      	mov	r3, r1
 800115c:	807b      	strh	r3, [r7, #2]
 800115e:	4613      	mov	r3, r2
 8001160:	803b      	strh	r3, [r7, #0]
	uint16_t PixelHeight;
	uint8_t WidthLoops, CharBits, CharBitsLeft;
	uint8_t CharNumber = ch - EF_GetFontStartChar();
 8001162:	f7ff fecf 	bl	8000f04 <EF_GetFontStartChar>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	747b      	strb	r3, [r7, #17]

	if(ch == ' ') // Check if we have a Space char
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b20      	cmp	r3, #32
 8001174:	d120      	bne.n	80011b8 <EF_PutChar+0x74>
	{
		if(Btransparent == BG_COLOR) // If draw BG by color...
 8001176:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800117a:	2b01      	cmp	r3, #1
 800117c:	d114      	bne.n	80011a8 <EF_PutChar+0x64>
		{
			// Draw filled rectangle on Space char
			GFX_DrawFillRectangle(PosX, PosY, SPACE_WIDHT * EF_GetFontSpaceWidth(), CurrentFont->CharHeight,  Bcolor);
 800117e:	88bc      	ldrh	r4, [r7, #4]
 8001180:	887d      	ldrh	r5, [r7, #2]
 8001182:	f7ff fed7 	bl	8000f34 <EF_GetFontSpaceWidth>
 8001186:	4603      	mov	r3, r0
 8001188:	b29b      	uxth	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	0052      	lsls	r2, r2, #1
 800118e:	4413      	add	r3, r2
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <EF_PutChar+0x1b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b299      	uxth	r1, r3
 800119a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	460b      	mov	r3, r1
 80011a0:	4629      	mov	r1, r5
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff fdaf 	bl	8000d06 <GFX_DrawFillRectangle>
		}
		// Return width for String function
		return SPACE_WIDHT * EF_GetFontSpaceWidth();
 80011a8:	f7ff fec4 	bl	8000f34 <EF_GetFontSpaceWidth>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	0052      	lsls	r2, r2, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	e09c      	b.n	80012f2 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font  (smaller than the first)
	if(ch < EF_GetFontStartChar())
 80011b8:	f7ff fea4 	bl	8000f04 <EF_GetFontStartChar>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d201      	bcs.n	80011ca <EF_PutChar+0x86>
	{
		return 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e093      	b.n	80012f2 <EF_PutChar+0x1ae>
	}

	// Return if char is not in our font (bigger than the lastlast)
	if (CharNumber > EF_GetFontEndChar())
 80011ca:	f7ff fea7 	bl	8000f1c <EF_GetFontEndChar>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	7c7b      	ldrb	r3, [r7, #17]
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d901      	bls.n	80011dc <EF_PutChar+0x98>
	{
		return 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	e08a      	b.n	80012f2 <EF_PutChar+0x1ae>
	}

	// Get Current char info descriptor - {width, bitmap start byte}
	const FONT_CHAR_INFO *CurrentChar = &CurrentFont->CharDescription[CharNumber];
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <EF_PutChar+0x1b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	7c7b      	ldrb	r3, [r7, #17]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
	// Get bitmap pointer for our char
	uint8_t *CharPointer = (uint8_t*)&CurrentFont->CharBitmaps[CurrentFont->CharDescription[CharNumber].CharOffset];
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <EF_PutChar+0x1b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a42      	ldr	r2, [pc, #264]	; (80012fc <EF_PutChar+0x1b8>)
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	6851      	ldr	r1, [r2, #4]
 80011f6:	7c7a      	ldrb	r2, [r7, #17]
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	440a      	add	r2, r1
 80011fc:	8852      	ldrh	r2, [r2, #2]
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]

	// 1st iteration - for each Row by Height
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 8001202:	2300      	movs	r3, #0
 8001204:	83fb      	strh	r3, [r7, #30]
 8001206:	e066      	b.n	80012d6 <EF_PutChar+0x192>
	{
		// Check how many bits left to draw in current Row
		CharBitsLeft = CurrentChar->CharWidth;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	76fb      	strb	r3, [r7, #27]

		// 2nd Iterator - For each byte in that Row
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 800120e:	2300      	movs	r3, #0
 8001210:	777b      	strb	r3, [r7, #29]
 8001212:	e053      	b.n	80012bc <EF_PutChar+0x178>
		{
			// Take one line
			uint8_t line = (uint8_t)*CharPointer;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	74fb      	strb	r3, [r7, #19]

			// Define how many bit to draw - full byte or less
			if(CharBitsLeft >= 8)
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d905      	bls.n	800122c <EF_PutChar+0xe8>
			{
				CharBits = 8; // Full byte
 8001220:	2308      	movs	r3, #8
 8001222:	773b      	strb	r3, [r7, #28]
				CharBitsLeft -= 8; // Decrease bits left counter
 8001224:	7efb      	ldrb	r3, [r7, #27]
 8001226:	3b08      	subs	r3, #8
 8001228:	76fb      	strb	r3, [r7, #27]
 800122a:	e001      	b.n	8001230 <EF_PutChar+0xec>
			}
			else
			{
				// If less than byte - only few bits
				CharBits = CharBitsLeft;
 800122c:	7efb      	ldrb	r3, [r7, #27]
 800122e:	773b      	strb	r3, [r7, #28]
			}
			// 3rd Iterator - for each bit in current byte in current row ;)
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 8001230:	2300      	movs	r3, #0
 8001232:	74bb      	strb	r3, [r7, #18]
 8001234:	e038      	b.n	80012a8 <EF_PutChar+0x164>
			{
				// Check bit first from left
				if(line & 0x80)
 8001236:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da15      	bge.n	800126a <EF_PutChar+0x126>
				{
					// If pixel exists - draw it
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Fcolor);
 800123e:	7f7b      	ldrb	r3, [r7, #29]
 8001240:	b29b      	uxth	r3, r3
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	b29a      	uxth	r2, r3
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	b29a      	uxth	r2, r3
 800124c:	7cbb      	ldrb	r3, [r7, #18]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b29b      	uxth	r3, r3
 8001254:	b218      	sxth	r0, r3
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	8bfb      	ldrh	r3, [r7, #30]
 800125a:	4413      	add	r3, r2
 800125c:	b29b      	uxth	r3, r3
 800125e:	b21b      	sxth	r3, r3
 8001260:	883a      	ldrh	r2, [r7, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	f000 f9d3 	bl	800160e <ILI9341_WritePixel>
 8001268:	e018      	b.n	800129c <EF_PutChar+0x158>
				}
				else if(Btransparent == BG_COLOR)
 800126a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800126e:	2b01      	cmp	r3, #1
 8001270:	d114      	bne.n	800129c <EF_PutChar+0x158>
				{
					// If no character pixel, then BG pixel
					GFX_DrawPixel(PosX + (WidthLoops*8) + i, PosY + PixelHeight, Bcolor);
 8001272:	7f7b      	ldrb	r3, [r7, #29]
 8001274:	b29b      	uxth	r3, r3
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	b29a      	uxth	r2, r3
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	b29a      	uxth	r2, r3
 8001280:	7cbb      	ldrb	r3, [r7, #18]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	b218      	sxth	r0, r3
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	8bfb      	ldrh	r3, [r7, #30]
 800128e:	4413      	add	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	b21b      	sxth	r3, r3
 8001294:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001296:	4619      	mov	r1, r3
 8001298:	f000 f9b9 	bl	800160e <ILI9341_WritePixel>
			for(uint8_t i = 0; i < CharBits; i++, line <<= 1)
 800129c:	7cbb      	ldrb	r3, [r7, #18]
 800129e:	3301      	adds	r3, #1
 80012a0:	74bb      	strb	r3, [r7, #18]
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	74fb      	strb	r3, [r7, #19]
 80012a8:	7cba      	ldrb	r2, [r7, #18]
 80012aa:	7f3b      	ldrb	r3, [r7, #28]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3c2      	bcc.n	8001236 <EF_PutChar+0xf2>
				}
			}

			// Take next byte in current char bitmap
			CharPointer++;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
		for(WidthLoops = 0; WidthLoops <= (CurrentChar->CharWidth-1) / 8; WidthLoops++)
 80012b6:	7f7b      	ldrb	r3, [r7, #29]
 80012b8:	3301      	adds	r3, #1
 80012ba:	777b      	strb	r3, [r7, #29]
 80012bc:	7f7a      	ldrb	r2, [r7, #29]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	da00      	bge.n	80012ca <EF_PutChar+0x186>
 80012c8:	3307      	adds	r3, #7
 80012ca:	10db      	asrs	r3, r3, #3
 80012cc:	429a      	cmp	r2, r3
 80012ce:	dda1      	ble.n	8001214 <EF_PutChar+0xd0>
	for(PixelHeight = 0; PixelHeight < CurrentFont->CharHeight; PixelHeight++)
 80012d0:	8bfb      	ldrh	r3, [r7, #30]
 80012d2:	3301      	adds	r3, #1
 80012d4:	83fb      	strh	r3, [r7, #30]
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <EF_PutChar+0x1b8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	8bfa      	ldrh	r2, [r7, #30]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d391      	bcc.n	8001208 <EF_PutChar+0xc4>
		}
	}
	// Return char width for String function
	return CurrentFont->CharDescription[CharNumber].CharWidth;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <EF_PutChar+0x1b8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	7c7b      	ldrb	r3, [r7, #17]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000084 	.word	0x20000084

08001300 <EF_PutString>:

uint8_t EF_PutString(const uint8_t *pStr, uint16_t PosX, uint16_t PosY, uint16_t Fcolor, BG_FONT Btransparent, uint16_t Bcolor)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af02      	add	r7, sp, #8
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	4608      	mov	r0, r1
 800130a:	4611      	mov	r1, r2
 800130c:	461a      	mov	r2, r3
 800130e:	4603      	mov	r3, r0
 8001310:	817b      	strh	r3, [r7, #10]
 8001312:	460b      	mov	r3, r1
 8001314:	813b      	strh	r3, [r7, #8]
 8001316:	4613      	mov	r3, r2
 8001318:	80fb      	strh	r3, [r7, #6]
	uint8_t Length = strlen((char*)pStr); // Take a string length in bytes
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7fe ff72 	bl	8000204 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	74bb      	strb	r3, [r7, #18]
	uint8_t Loop; // Loop Iterator for current char
	uint16_t Shift = 0; // Shift in X-axis for each char drawing
 8001324:	2300      	movs	r3, #0
 8001326:	82bb      	strh	r3, [r7, #20]
	uint8_t CharWidth; // Current char width
	uint8_t CharToPrint; // Current char to print

	for(Loop = 0; Loop < Length; Loop++) // Go threw each char
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
 800132c:	e05a      	b.n	80013e4 <EF_PutString+0xe4>
	{
		if((pStr[Loop] <= 0xC5) && (pStr[Loop] >= 0xC3)) // check if current char is a Polish sign
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2bc5      	cmp	r3, #197	; 0xc5
 8001338:	d817      	bhi.n	800136a <EF_PutString+0x6a>
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2bc2      	cmp	r3, #194	; 0xc2
 8001344:	d911      	bls.n	800136a <EF_PutString+0x6a>
		{
			// If yes - decode that char
			CharToPrint = EF_DecodePolish(pStr[Loop], pStr[Loop+1]);
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	7818      	ldrb	r0, [r3, #0]
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	3301      	adds	r3, #1
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fdf7 	bl	8000f4c <EF_DecodePolish>
 800135e:	4603      	mov	r3, r0
 8001360:	74fb      	strb	r3, [r7, #19]
			// Skip one byte - Polish chars are 2-bytes
			Loop++;
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	3301      	adds	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
 8001368:	e004      	b.n	8001374 <EF_PutString+0x74>
		}
		else
		{
			// If not polish - just take that char
			CharToPrint = pStr[Loop];
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	74fb      	strb	r3, [r7, #19]
		}
		// Draw char and take its width
		CharWidth = EF_PutChar(CharToPrint, PosX + Shift, PosY, Fcolor, Btransparent, Bcolor);
 8001374:	897a      	ldrh	r2, [r7, #10]
 8001376:	8abb      	ldrh	r3, [r7, #20]
 8001378:	4413      	add	r3, r2
 800137a:	b299      	uxth	r1, r3
 800137c:	88fc      	ldrh	r4, [r7, #6]
 800137e:	893a      	ldrh	r2, [r7, #8]
 8001380:	7cf8      	ldrb	r0, [r7, #19]
 8001382:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	4623      	mov	r3, r4
 800138e:	f7ff fed9 	bl	8001144 <EF_PutChar>
 8001392:	4603      	mov	r3, r0
 8001394:	747b      	strb	r3, [r7, #17]

		// Add last char width to drawing Shift
		Shift += CharWidth;
 8001396:	7c7b      	ldrb	r3, [r7, #17]
 8001398:	b29a      	uxth	r2, r3
 800139a:	8abb      	ldrh	r3, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	82bb      	strh	r3, [r7, #20]

		if(Btransparent == BG_COLOR)
 80013a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d113      	bne.n	80013d0 <EF_PutString+0xd0>
		{
			// If draw background - draw the BG color between chars
			GFX_DrawFillRectangle(PosX + Shift, PosY, EF_GetFontSpaceWidth(), EF_GetFontHeight(), Bcolor);
 80013a8:	897a      	ldrh	r2, [r7, #10]
 80013aa:	8abb      	ldrh	r3, [r7, #20]
 80013ac:	18d4      	adds	r4, r2, r3
 80013ae:	893d      	ldrh	r5, [r7, #8]
 80013b0:	f7ff fdc0 	bl	8000f34 <EF_GetFontSpaceWidth>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b29e      	uxth	r6, r3
 80013b8:	f7ff fd98 	bl	8000eec <EF_GetFontHeight>
 80013bc:	4603      	mov	r3, r0
 80013be:	b29a      	uxth	r2, r3
 80013c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	4632      	mov	r2, r6
 80013c8:	4629      	mov	r1, r5
 80013ca:	4620      	mov	r0, r4
 80013cc:	f7ff fc9b 	bl	8000d06 <GFX_DrawFillRectangle>
		}

		// Add between-char distance to Shift
		Shift += EF_GetFontSpaceWidth();
 80013d0:	f7ff fdb0 	bl	8000f34 <EF_GetFontSpaceWidth>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	8abb      	ldrh	r3, [r7, #20]
 80013da:	4413      	add	r3, r2
 80013dc:	82bb      	strh	r3, [r7, #20]
	for(Loop = 0; Loop < Length; Loop++) // Go threw each char
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	3301      	adds	r3, #1
 80013e2:	75fb      	strb	r3, [r7, #23]
 80013e4:	7dfa      	ldrb	r2, [r7, #23]
 80013e6:	7cbb      	ldrb	r3, [r7, #18]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3a0      	bcc.n	800132e <EF_PutString+0x2e>
	}
	// Return whole String shift - if you want to use it higher in app.
	return Shift - EF_GetFontSpaceWidth();
 80013ec:	8abb      	ldrh	r3, [r7, #20]
 80013ee:	b2dc      	uxtb	r4, r3
 80013f0:	f7ff fda0 	bl	8000f34 <EF_GetFontSpaceWidth>
 80013f4:	4603      	mov	r3, r0
 80013f6:	1ae3      	subs	r3, r4, r3
 80013f8:	b2db      	uxtb	r3, r3
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001402 <ILI9341_Delay>:
//
// Basic function - write those for your MCU
//

static void ILI9341_Delay(uint32_t ms)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f001 f936 	bl	800267c <HAL_Delay>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <ILI9341_SendToTFT>:

static void ILI9341_SendToTFT(uint8_t *Byte, uint32_t Length)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
#if (ILI9341_OPTIMIZE_HAL_SPI == 1)
    while (Length > 0U)
 8001422:	e014      	b.n	800144e <ILI9341_SendToTFT+0x36>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <ILI9341_SendToTFT+0x5c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b02      	cmp	r3, #2
 8001432:	d10c      	bne.n	800144e <ILI9341_SendToTFT+0x36>
      {
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (*Byte);
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <ILI9341_SendToTFT+0x5c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	330c      	adds	r3, #12
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	701a      	strb	r2, [r3, #0]
        Byte++;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3301      	adds	r3, #1
 8001446:	607b      	str	r3, [r7, #4]
        Length--;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	603b      	str	r3, [r7, #0]
    while (Length > 0U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1e7      	bne.n	8001424 <ILI9341_SendToTFT+0xc>
      }
    }

    while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 8001454:	bf00      	nop
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <ILI9341_SendToTFT+0x5c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	2b80      	cmp	r3, #128	; 0x80
 8001464:	d0f7      	beq.n	8001456 <ILI9341_SendToTFT+0x3e>
    }

#else
	HAL_SPI_Transmit(Tft_hspi, Byte, Length, ILI9341_SPI_TIMEOUT);
#endif
}
 8001466:	bf00      	nop
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000088 	.word	0x20000088

08001478 <ILI9341_SendCommand>:

static void ILI9341_SendCommand(uint8_t Command)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001482:	2200      	movs	r2, #0
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	480b      	ldr	r0, [pc, #44]	; (80014b4 <ILI9341_SendCommand+0x3c>)
 8001488:	f001 fc68 	bl	8002d5c <HAL_GPIO_WritePin>
#endif
	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 800148c:	2200      	movs	r2, #0
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <ILI9341_SendCommand+0x40>)
 8001492:	f001 fc63 	bl	8002d5c <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	2101      	movs	r1, #1
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffbc 	bl	8001418 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80014a0:	2201      	movs	r2, #1
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <ILI9341_SendCommand+0x3c>)
 80014a6:	f001 fc59 	bl	8002d5c <HAL_GPIO_WritePin>
#endif
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800

080014bc <ILI9341_SendCommandAndData>:

static void ILI9341_SendCommandAndData(uint8_t Command, uint8_t *Data, uint32_t Length)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	73fb      	strb	r3, [r7, #15]
	// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 80014ca:	2200      	movs	r2, #0
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <ILI9341_SendCommandAndData+0x54>)
 80014d0:	f001 fc44 	bl	8002d5c <HAL_GPIO_WritePin>
#endif

	// DC to Command - DC to Low
	ILI9341_DC_LOW;
 80014d4:	2200      	movs	r2, #0
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <ILI9341_SendCommandAndData+0x58>)
 80014da:	f001 fc3f 	bl	8002d5c <HAL_GPIO_WritePin>

	// Send to TFT 1 byte
	ILI9341_SendToTFT(&Command, 1);
 80014de:	f107 030f 	add.w	r3, r7, #15
 80014e2:	2101      	movs	r1, #1
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff97 	bl	8001418 <ILI9341_SendToTFT>

	// DC to DATA - DC to High
	ILI9341_DC_HIGH;
 80014ea:	2201      	movs	r2, #1
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <ILI9341_SendCommandAndData+0x58>)
 80014f0:	f001 fc34 	bl	8002d5c <HAL_GPIO_WritePin>

	// Send to TFT Length byte
	ILI9341_SendToTFT(Data, Length);
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f7ff ff8e 	bl	8001418 <ILI9341_SendToTFT>

	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 80014fc:	2201      	movs	r2, #1
 80014fe:	2140      	movs	r1, #64	; 0x40
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <ILI9341_SendCommandAndData+0x54>)
 8001502:	f001 fc2b 	bl	8002d5c <HAL_GPIO_WritePin>
#endif
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020400 	.word	0x40020400
 8001514:	40020800 	.word	0x40020800

08001518 <ILI9341_SetRotation>:

//
// TFT Functions
//
void ILI9341_SetRotation(uint8_t Rotation)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	if(Rotation > 3)
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d820      	bhi.n	800156a <ILI9341_SetRotation+0x52>
		return;
	switch(Rotation)
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d816      	bhi.n	800155c <ILI9341_SetRotation+0x44>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <ILI9341_SetRotation+0x1c>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001545 	.word	0x08001545
 8001538:	0800154b 	.word	0x0800154b
 800153c:	08001551 	.word	0x08001551
 8001540:	08001557 	.word	0x08001557
	{
	case 0:
		Rotation = (MADCTL_MX | MADCTL_BGR);
 8001544:	2348      	movs	r3, #72	; 0x48
 8001546:	71fb      	strb	r3, [r7, #7]
		break;
 8001548:	e008      	b.n	800155c <ILI9341_SetRotation+0x44>
	case 1:
		Rotation = (MADCTL_MV | MADCTL_BGR);
 800154a:	2328      	movs	r3, #40	; 0x28
 800154c:	71fb      	strb	r3, [r7, #7]
		break;
 800154e:	e005      	b.n	800155c <ILI9341_SetRotation+0x44>
	case 2:
		Rotation = (MADCTL_MY | MADCTL_BGR);
 8001550:	2388      	movs	r3, #136	; 0x88
 8001552:	71fb      	strb	r3, [r7, #7]
		break;
 8001554:	e002      	b.n	800155c <ILI9341_SetRotation+0x44>
	case 3:
		Rotation = (MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001556:	23e8      	movs	r3, #232	; 0xe8
 8001558:	71fb      	strb	r3, [r7, #7]
		break;
 800155a:	bf00      	nop
	}
	ILI9341_SendCommandAndData(ILI9341_MADCTL, &Rotation, 1);
 800155c:	1dfb      	adds	r3, r7, #7
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	2036      	movs	r0, #54	; 0x36
 8001564:	f7ff ffaa 	bl	80014bc <ILI9341_SendCommandAndData>
 8001568:	e000      	b.n	800156c <ILI9341_SetRotation+0x54>
		return;
 800156a:	bf00      	nop
}
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <ILI9341_SetAddrWindow>:

void ILI9341_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4603      	mov	r3, r0
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
 800158e:	4613      	mov	r3, r2
 8001590:	803b      	strh	r3, [r7, #0]
	uint8_t DataToTransfer[4];

	uint16_t x2 = (x1 + w - 1), y2 = (y1 + h - 1);
 8001592:	88fa      	ldrh	r2, [r7, #6]
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4413      	add	r3, r2
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	81fb      	strh	r3, [r7, #14]
 800159e:	88ba      	ldrh	r2, [r7, #4]
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	81bb      	strh	r3, [r7, #12]

	DataToTransfer[0] = (x1 >> 8);
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = (x1 & 0xFF);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = (x2 >> 8);
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = (x2 & 0xFF);
 80015c4:	89fb      	ldrh	r3, [r7, #14]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	72fb      	strb	r3, [r7, #11]
	ILI9341_SendCommandAndData(ILI9341_CASET, DataToTransfer, 4);
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	202a      	movs	r0, #42	; 0x2a
 80015d4:	f7ff ff72 	bl	80014bc <ILI9341_SendCommandAndData>

	DataToTransfer[0] = (y1 >> 8);
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	723b      	strb	r3, [r7, #8]
	DataToTransfer[1] = (y1 & 0xFF);
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	727b      	strb	r3, [r7, #9]
	DataToTransfer[2] = (y2 >> 8);
 80015e8:	89bb      	ldrh	r3, [r7, #12]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	72bb      	strb	r3, [r7, #10]
	DataToTransfer[3] = (y2 & 0xFF);
 80015f2:	89bb      	ldrh	r3, [r7, #12]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	72fb      	strb	r3, [r7, #11]
	ILI9341_SendCommandAndData(ILI9341_PASET, DataToTransfer, 4);
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	202b      	movs	r0, #43	; 0x2b
 8001602:	f7ff ff5b 	bl	80014bc <ILI9341_SendCommandAndData>
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}

0800160e <ILI9341_WritePixel>:

void ILI9341_WritePixel(int16_t x, int16_t y, uint16_t color)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	80fb      	strh	r3, [r7, #6]
 8001618:	460b      	mov	r3, r1
 800161a:	80bb      	strh	r3, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	807b      	strh	r3, [r7, #2]
	uint8_t DataToTransfer[2];

	if ((x >= 0) && (x < ILI9341_TFTWIDTH) && (y >= 0) && (y < ILI9341_TFTHEIGHT))
 8001620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001624:	2b00      	cmp	r3, #0
 8001626:	db21      	blt.n	800166c <ILI9341_WritePixel+0x5e>
 8001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001630:	da1c      	bge.n	800166c <ILI9341_WritePixel+0x5e>
 8001632:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db18      	blt.n	800166c <ILI9341_WritePixel+0x5e>
 800163a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800163e:	2bef      	cmp	r3, #239	; 0xef
 8001640:	dc14      	bgt.n	800166c <ILI9341_WritePixel+0x5e>
	{
		// Set Window for 1x1 pixel
		ILI9341_SetAddrWindow(x, y, 1, 1);
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	88b9      	ldrh	r1, [r7, #4]
 8001646:	2301      	movs	r3, #1
 8001648:	2201      	movs	r2, #1
 800164a:	f7ff ff93 	bl	8001574 <ILI9341_SetAddrWindow>

		// Fulfill buffer with color
		DataToTransfer[0] = color >> 8;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	b29b      	uxth	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	733b      	strb	r3, [r7, #12]
		DataToTransfer[1] = color & 0xFF;
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	737b      	strb	r3, [r7, #13]
		// Push color bytes to RAM
		ILI9341_SendCommandAndData(ILI9341_RAMWR, DataToTransfer, 2);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2202      	movs	r2, #2
 8001664:	4619      	mov	r1, r3
 8001666:	202c      	movs	r0, #44	; 0x2c
 8001668:	f7ff ff28 	bl	80014bc <ILI9341_SendCommandAndData>
	}
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <ILI9341_ClearDisplay>:
		ILI9341_SendCommandAndData(ILI9341_RAMWR, (uint8_t *)img, (w * h * 2));
	}
}

void ILI9341_ClearDisplay(uint16_t Color)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddrWindow(0, 0, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT);
 800167e:	23f0      	movs	r3, #240	; 0xf0
 8001680:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001684:	2100      	movs	r1, #0
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff ff74 	bl	8001574 <ILI9341_SetAddrWindow>
	ILI9341_SendCommand(ILI9341_RAMWR);
 800168c:	202c      	movs	r0, #44	; 0x2c
 800168e:	f7ff fef3 	bl	8001478 <ILI9341_SendCommand>

#if (ILI9341_OPTIMIZE_HAL_SPI == 1)
	uint32_t Length = ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT;
 8001692:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001696:	60fb      	str	r3, [r7, #12]

// CS Low
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_LOW;
 8001698:	2200      	movs	r2, #0
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	4820      	ldr	r0, [pc, #128]	; (8001720 <ILI9341_ClearDisplay+0xac>)
 800169e:	f001 fb5d 	bl	8002d5c <HAL_GPIO_WritePin>
#endif

	// DC to DATA - DC to High
	ILI9341_DC_HIGH;
 80016a2:	2201      	movs	r2, #1
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	481f      	ldr	r0, [pc, #124]	; (8001724 <ILI9341_ClearDisplay+0xb0>)
 80016a8:	f001 fb58 	bl	8002d5c <HAL_GPIO_WritePin>

    while (Length > 0U)
 80016ac:	e023      	b.n	80016f6 <ILI9341_ClearDisplay+0x82>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE))
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <ILI9341_ClearDisplay+0xb4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d11b      	bne.n	80016f6 <ILI9341_ClearDisplay+0x82>
      {
        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color >> 8);
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <ILI9341_ClearDisplay+0xb4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	330c      	adds	r3, #12
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	701a      	strb	r2, [r3, #0]

        while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_TXE) != SET)
 80016d0:	bf00      	nop
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <ILI9341_ClearDisplay+0xb4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d1f7      	bne.n	80016d2 <ILI9341_ClearDisplay+0x5e>
        {}

        *((__IO uint8_t *)&Tft_hspi->Instance->DR) = (Color & 0xFF);
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <ILI9341_ClearDisplay+0xb4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	330c      	adds	r3, #12
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]

        Length--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
    while (Length > 0U)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1d8      	bne.n	80016ae <ILI9341_ClearDisplay+0x3a>
      }
    }

    while(__HAL_SPI_GET_FLAG(Tft_hspi, SPI_FLAG_BSY) != RESET)
 80016fc:	bf00      	nop
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <ILI9341_ClearDisplay+0xb4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b80      	cmp	r3, #128	; 0x80
 800170c:	d0f7      	beq.n	80016fe <ILI9341_ClearDisplay+0x8a>
    }


	// CS High
#if (ILI9341_USE_CS == 1)
	ILI9341_CS_HIGH;
 800170e:	2201      	movs	r2, #1
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <ILI9341_ClearDisplay+0xac>)
 8001714:	f001 fb22 	bl	8002d5c <HAL_GPIO_WritePin>
	for(uint32_t i =0; i < (ILI9341_TFTWIDTH * ILI9341_TFTHEIGHT); i++)
	{
		ILI9341_SendData16(Color);
	}
#endif
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40020400 	.word	0x40020400
 8001724:	40020800 	.word	0x40020800
 8001728:	20000088 	.word	0x20000088

0800172c <ILI9341_Init>:
  ILI9341_DISPON  , 0x80,                // Display on
  0x00                                   // End of list
};

void ILI9341_Init(SPI_HandleTypeDef *hspi)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	Tft_hspi = hspi;
 8001734:	4a24      	ldr	r2, [pc, #144]	; (80017c8 <ILI9341_Init+0x9c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]

    uint8_t cmd, x, numArgs;
    const uint8_t *addr = initcmd;
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <ILI9341_Init+0xa0>)
 800173c:	60fb      	str	r3, [r7, #12]
#if (ILI9341_OPTIMIZE_HAL_SPI == 1)
    __HAL_SPI_ENABLE(hspi);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800174c:	601a      	str	r2, [r3, #0]
#endif

#if (ILI9341_USE_HW_RESET == 1)
	ILI9341_RST_LOW;
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001754:	481e      	ldr	r0, [pc, #120]	; (80017d0 <ILI9341_Init+0xa4>)
 8001756:	f001 fb01 	bl	8002d5c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800175a:	200a      	movs	r0, #10
 800175c:	f7ff fe51 	bl	8001402 <ILI9341_Delay>
	ILI9341_RST_HIGH;
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	481a      	ldr	r0, [pc, #104]	; (80017d0 <ILI9341_Init+0xa4>)
 8001768:	f001 faf8 	bl	8002d5c <HAL_GPIO_WritePin>
	ILI9341_Delay(10);
 800176c:	200a      	movs	r0, #10
 800176e:	f7ff fe48 	bl	8001402 <ILI9341_Delay>
#else // ILI9341_USE_HW_RESET == 0
	ILI9341_SendCommand(ILI9341_SWRESET); // Engage software reset
    ILI9341_Delay(150);
#endif

    while ((cmd = *(addr++)) > 0)
 8001772:	e019      	b.n	80017a8 <ILI9341_Init+0x7c>
    {
      x = *(addr++);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60fa      	str	r2, [r7, #12]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	72bb      	strb	r3, [r7, #10]
      numArgs = x & 0x7F;
 800177e:	7abb      	ldrb	r3, [r7, #10]
 8001780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001784:	727b      	strb	r3, [r7, #9]
      ILI9341_SendCommandAndData(cmd, (uint8_t *)addr, numArgs);
 8001786:	7a7a      	ldrb	r2, [r7, #9]
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe95 	bl	80014bc <ILI9341_SendCommandAndData>
      addr += numArgs;
 8001792:	7a7b      	ldrb	r3, [r7, #9]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
      if (x & 0x80)
 800179a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da02      	bge.n	80017a8 <ILI9341_Init+0x7c>
      {
    	  ILI9341_Delay(150);
 80017a2:	2096      	movs	r0, #150	; 0x96
 80017a4:	f7ff fe2d 	bl	8001402 <ILI9341_Delay>
    while ((cmd = *(addr++)) > 0)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60fa      	str	r2, [r7, #12]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	72fb      	strb	r3, [r7, #11]
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1dd      	bne.n	8001774 <ILI9341_Init+0x48>
      }
    }

    ILI9341_SetRotation(ILI9341_ROTATION);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f7ff fead 	bl	8001518 <ILI9341_SetRotation>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000088 	.word	0x20000088
 80017cc:	080062a4 	.word	0x080062a4
 80017d0:	40020000 	.word	0x40020000

080017d4 <XPT2046_GetRawData>:

//
// Read Raw data from controller XPT2046
//
void XPT2046_GetRawData(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af02      	add	r7, sp, #8
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET); // CS Active
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <XPT2046_GetRawData+0x38>)
 80017e2:	f001 fabb 	bl	8002d5c <HAL_GPIO_WritePin>
#endif
	// Send Control bytes and receive raw ADC values from controler
	HAL_SPI_TransmitReceive(Xpt2046SpiHandler, SendBuffer, ReceiveBuffer, 5, XPT2046_SPI_TIMEOUT);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <XPT2046_GetRawData+0x3c>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2305      	movs	r3, #5
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <XPT2046_GetRawData+0x40>)
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <XPT2046_GetRawData+0x44>)
 80017f6:	f002 f8d6 	bl	80039a6 <HAL_SPI_TransmitReceive>
#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET); // CS Idle
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <XPT2046_GetRawData+0x38>)
 8001802:	f001 faab 	bl	8002d5c <HAL_GPIO_WritePin>
#endif
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40020400 	.word	0x40020400
 8001810:	20000064 	.word	0x20000064
 8001814:	20000074 	.word	0x20000074
 8001818:	2000006c 	.word	0x2000006c

0800181c <XPT2046_ReadRawData>:

//
// Read Raw ADC data to variables
//
void XPT2046_ReadRawData(uint16_t *X, uint16_t *Y)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	*X = (uint16_t)((ReceiveBuffer[1]<<8) | (ReceiveBuffer[2]));
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <XPT2046_ReadRawData+0x48>)
 8001828:	785b      	ldrb	r3, [r3, #1]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21a      	sxth	r2, r3
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <XPT2046_ReadRawData+0x48>)
 8001830:	789b      	ldrb	r3, [r3, #2]
 8001832:	b21b      	sxth	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b21b      	sxth	r3, r3
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	801a      	strh	r2, [r3, #0]
	*Y = (uint16_t)((ReceiveBuffer[3]<<8) | (ReceiveBuffer[4]));
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <XPT2046_ReadRawData+0x48>)
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <XPT2046_ReadRawData+0x48>)
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	b21b      	sxth	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b21b      	sxth	r3, r3
 8001850:	b29a      	uxth	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	801a      	strh	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000074 	.word	0x20000074

08001868 <XPT2046_ReadTouchPoint>:

//
// Read Raw ADC data to variables and calculate coords in pixels based on Calibration Data
//
void XPT2046_ReadTouchPoint(uint16_t *X, uint16_t *Y)
{
 8001868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
	uint16_t _x, _y;
	XPT2046_ReadRawData(&_x, &_y);
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	f107 030e 	add.w	r3, r7, #14
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffcc 	bl	800181c <XPT2046_ReadRawData>

	if(CalibrationMode == 0)
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <XPT2046_ReadTouchPoint+0x118>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d16e      	bne.n	800196a <XPT2046_ReadTouchPoint+0x102>
	{
		// Calculate in Normal Mode
		*X = CalibrationData.alpha_x * _x + CalibrationData.beta_x * _y + CalibrationData.delta_x;
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <XPT2046_ReadTouchPoint+0x11c>)
 800188e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe ff39 	bl	800070c <__aeabi_i2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fcb7 	bl	8000214 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4690      	mov	r8, r2
 80018ac:	4699      	mov	r9, r3
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <XPT2046_ReadTouchPoint+0x11c>)
 80018b0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80018b4:	89bb      	ldrh	r3, [r7, #12]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe ff28 	bl	800070c <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fca6 	bl	8000214 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4640      	mov	r0, r8
 80018ce:	4649      	mov	r1, r9
 80018d0:	f7fe fdd0 	bl	8000474 <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <XPT2046_ReadTouchPoint+0x11c>)
 80018de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018e2:	f7fe fdc7 	bl	8000474 <__adddf3>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7fe ff77 	bl	80007e0 <__aeabi_d2uiz>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	801a      	strh	r2, [r3, #0]
		*Y = CalibrationData.alpha_y * _x + CalibrationData.beta_y * _y + CalibrationData.delta_y;
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <XPT2046_ReadTouchPoint+0x11c>)
 80018fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe ff02 	bl	800070c <__aeabi_i2d>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fc80 	bl	8000214 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4690      	mov	r8, r2
 800191a:	4699      	mov	r9, r3
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <XPT2046_ReadTouchPoint+0x11c>)
 800191e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001922:	89bb      	ldrh	r3, [r7, #12]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fef1 	bl	800070c <__aeabi_i2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7fe fc6f 	bl	8000214 <__aeabi_dmul>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4640      	mov	r0, r8
 800193c:	4649      	mov	r1, r9
 800193e:	f7fe fd99 	bl	8000474 <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <XPT2046_ReadTouchPoint+0x11c>)
 800194c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001950:	f7fe fd90 	bl	8000474 <__adddf3>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7fe ff40 	bl	80007e0 <__aeabi_d2uiz>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	801a      	strh	r2, [r3, #0]
	{
		// Get Raw data in Calibration Mode
		*X = _x;
		*Y = _y;
	}
}
 8001968:	e005      	b.n	8001976 <XPT2046_ReadTouchPoint+0x10e>
		*X = _x;
 800196a:	89fa      	ldrh	r2, [r7, #14]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	801a      	strh	r2, [r3, #0]
		*Y = _y;
 8001970:	89ba      	ldrh	r2, [r7, #12]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001980:	20000079 	.word	0x20000079
 8001984:	20000000 	.word	0x20000000

08001988 <XPT2046_GetTouchPoint>:

//
// Get Touch Point - Average from last n (MAX_SAMPLES) measurments
//
void XPT2046_GetTouchPoint(uint16_t *X, uint16_t *Y)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	uint32_t AverageX = 0, AverageY = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
	uint8_t i;

	for(i = 0; i < MAX_SAMPLES; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e013      	b.n	80019c8 <XPT2046_GetTouchPoint+0x40>
	{
		AverageX += TouchSamples[0][i];
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4a13      	ldr	r2, [pc, #76]	; (80019f0 <XPT2046_GetTouchPoint+0x68>)
 80019a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a8:	461a      	mov	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
		AverageY += TouchSamples[1][i];
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <XPT2046_GetTouchPoint+0x68>)
 80019b4:	3308      	adds	r3, #8
 80019b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ba:	461a      	mov	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4413      	add	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
	for(i = 0; i < MAX_SAMPLES; i++)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	3301      	adds	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b07      	cmp	r3, #7
 80019cc:	d9e8      	bls.n	80019a0 <XPT2046_GetTouchPoint+0x18>
	}

	*X = AverageX / MAX_SAMPLES;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	801a      	strh	r2, [r3, #0]
	*Y = AverageY / MAX_SAMPLES;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	b29a      	uxth	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	801a      	strh	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000008c 	.word	0x2000008c

080019f4 <XPT2046_IsTouched>:

//
// Check if screen was touched - machine state has to be in TOUCHED state
//
uint8_t XPT2046_IsTouched(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	if(TouchState == XPT2046_TOUCHED)
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <XPT2046_IsTouched+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d101      	bne.n	8001a06 <XPT2046_IsTouched+0x12>
		return 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <XPT2046_IsTouched+0x14>

	return 0;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200000ad 	.word	0x200000ad

08001a18 <XPT2046_Task>:

//
// Main Task - put it in main loop
//
void XPT2046_Task(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	  switch(TouchState)
 8001a1c:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <XPT2046_Task+0x15c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	f200 80a4 	bhi.w	8001b70 <XPT2046_Task+0x158>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <XPT2046_Task+0x18>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001b67 	.word	0x08001b67
 8001a34:	08001a41 	.word	0x08001a41
 8001a38:	08001ab7 	.word	0x08001ab7
 8001a3c:	08001b25 	.word	0x08001b25
		  // Do nothing in ILDE - we are waiting for interrupt
		  break;

	  case XPT2046_PRESAMPLING:
		  // Get first MAX_SAMPLES samples
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8001a40:	f000 fe10 	bl	8002664 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <XPT2046_Task+0x160>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	f240 808c 	bls.w	8001b6a <XPT2046_Task+0x152>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8001a52:	f7ff febf 	bl	80017d4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8001a56:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <XPT2046_Task+0x164>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <XPT2046_Task+0x168>)
 8001a5e:	441a      	add	r2, r3
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <XPT2046_Task+0x164>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3308      	adds	r3, #8
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4945      	ldr	r1, [pc, #276]	; (8001b80 <XPT2046_Task+0x168>)
 8001a6a:	440b      	add	r3, r1
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff fefa 	bl	8001868 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <XPT2046_Task+0x164>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <XPT2046_Task+0x164>)
 8001a7e:	701a      	strb	r2, [r3, #0]

			  // If we reach MAX_SAMPLES samples
			  if(SampleCounter == MAX_SAMPLES)
 8001a80:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <XPT2046_Task+0x164>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d105      	bne.n	8001a94 <XPT2046_Task+0x7c>
			  {
				  // Reset Counter
				  SampleCounter = 0;
 8001a88:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <XPT2046_Task+0x164>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
				  // Jump to TOUCHED state - we are sure that touch occurs
				  TouchState = XPT2046_TOUCHED;
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <XPT2046_Task+0x15c>)
 8001a90:	2202      	movs	r2, #2
 8001a92:	701a      	strb	r2, [r3, #0]
			  }

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8001a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a98:	483a      	ldr	r0, [pc, #232]	; (8001b84 <XPT2046_Task+0x16c>)
 8001a9a:	f001 f947 	bl	8002d2c <HAL_GPIO_ReadPin>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d102      	bne.n	8001aaa <XPT2046_Task+0x92>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <XPT2046_Task+0x15c>)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8001aaa:	f000 fddb 	bl	8002664 <HAL_GetTick>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <XPT2046_Task+0x160>)
 8001ab2:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8001ab4:	e059      	b.n	8001b6a <XPT2046_Task+0x152>

	  case XPT2046_TOUCHED:
		  // Read touch points
		  if((HAL_GetTick() - SampleTimer ) > SAMPLE_INTERVAL) // Software Timers
 8001ab6:	f000 fdd5 	bl	8002664 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <XPT2046_Task+0x160>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d953      	bls.n	8001b6e <XPT2046_Task+0x156>
		  {
			  // Read Raw Data from XPT2046
			  XPT2046_GetRawData();
 8001ac6:	f7ff fe85 	bl	80017d4 <XPT2046_GetRawData>
			  // Read calculated points to Samples array
			  XPT2046_ReadTouchPoint(&TouchSamples[0][SampleCounter], &TouchSamples[1][SampleCounter]);
 8001aca:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <XPT2046_Task+0x164>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <XPT2046_Task+0x168>)
 8001ad2:	441a      	add	r2, r3
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <XPT2046_Task+0x164>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3308      	adds	r3, #8
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4928      	ldr	r1, [pc, #160]	; (8001b80 <XPT2046_Task+0x168>)
 8001ade:	440b      	add	r3, r1
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f7ff fec0 	bl	8001868 <XPT2046_ReadTouchPoint>
			  // Increase Sample counter
			  SampleCounter++;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <XPT2046_Task+0x164>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <XPT2046_Task+0x164>)
 8001af2:	701a      	strb	r2, [r3, #0]
			  // If MAX_SAMPLES reached - reset counter - simple ring buffer
			  SampleCounter %= MAX_SAMPLES;
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <XPT2046_Task+0x164>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <XPT2046_Task+0x164>)
 8001b00:	701a      	strb	r2, [r3, #0]

			  // Check if there is no more touch (Datasheet)
			  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin))
 8001b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b06:	481f      	ldr	r0, [pc, #124]	; (8001b84 <XPT2046_Task+0x16c>)
 8001b08:	f001 f910 	bl	8002d2c <HAL_GPIO_ReadPin>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <XPT2046_Task+0x100>
			  {
				  // Go to RELEASED state
				  TouchState = XPT2046_RELEASED;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <XPT2046_Task+0x15c>)
 8001b14:	2203      	movs	r2, #3
 8001b16:	701a      	strb	r2, [r3, #0]
			  }

			  // Feed Software Counter
			  SampleTimer = HAL_GetTick();
 8001b18:	f000 fda4 	bl	8002664 <HAL_GetTick>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <XPT2046_Task+0x160>)
 8001b20:	6013      	str	r3, [r2, #0]
		  }

		  break;
 8001b22:	e024      	b.n	8001b6e <XPT2046_Task+0x156>

	  case XPT2046_RELEASED:
		  // RELEASE state

		  // Return to IDLE
		  TouchState = XPT2046_IDLE;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <XPT2046_Task+0x15c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
		  // Reset Sample counter
		  SampleCounter = 0;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <XPT2046_Task+0x164>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
		  // Clea all interrupt flags
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8001b30:	e009      	b.n	8001b46 <XPT2046_Task+0x12e>
		  {
			  // GPIO FLAG
			  __HAL_GPIO_EXTI_CLEAR_IT(TOUCH_IRQ_Pin);
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <XPT2046_Task+0x170>)
 8001b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b38:	615a      	str	r2, [r3, #20]
			  // NVIC FLAG
			  HAL_NVIC_ClearPendingIRQ(Xpt2046Irqn);
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <XPT2046_Task+0x174>)
 8001b3c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 ff51 	bl	80029e8 <HAL_NVIC_ClearPendingIRQ>
		  while(HAL_NVIC_GetPendingIRQ(Xpt2046Irqn))
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <XPT2046_Task+0x174>)
 8001b48:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 ff3c 	bl	80029ca <HAL_NVIC_GetPendingIRQ>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ec      	bne.n	8001b32 <XPT2046_Task+0x11a>
		  }
		  // Enable Interrupt for next touch
		  HAL_NVIC_EnableIRQ(Xpt2046Irqn);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <XPT2046_Task+0x174>)
 8001b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 ff0b 	bl	800297a <HAL_NVIC_EnableIRQ>
		  break;
 8001b64:	e004      	b.n	8001b70 <XPT2046_Task+0x158>
		  break;
 8001b66:	bf00      	nop
 8001b68:	e002      	b.n	8001b70 <XPT2046_Task+0x158>
		  break;
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <XPT2046_Task+0x158>
		  break;
 8001b6e:	bf00      	nop

	  }
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200000ad 	.word	0x200000ad
 8001b78:	200000b0 	.word	0x200000b0
 8001b7c:	200000ac 	.word	0x200000ac
 8001b80:	2000008c 	.word	0x2000008c
 8001b84:	40020000 	.word	0x40020000
 8001b88:	40013c00 	.word	0x40013c00
 8001b8c:	20000068 	.word	0x20000068

08001b90 <XPT2046_IRQ>:

//
// Interrupt routine - put in IRQ handler callback
//
void XPT2046_IRQ(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	// Disable IRQ for avoid false IRQs (Datasheet)
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001b94:	2017      	movs	r0, #23
 8001b96:	f000 fefe 	bl	8002996 <HAL_NVIC_DisableIRQ>
	// Jump to PRESAMPLING state
	TouchState = XPT2046_PRESAMPLING;
 8001b9a:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <XPT2046_IRQ+0x14>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000ad 	.word	0x200000ad

08001ba8 <XPT2046_Init>:

//
// Init function
//
void XPT2046_Init(SPI_HandleTypeDef *hspi, IRQn_Type TouchIRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
	// Get SPI handler and IRQ number
	Xpt2046SpiHandler = hspi;
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <XPT2046_Init+0x84>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
	Xpt2046Irqn = TouchIRQn;
 8001bba:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <XPT2046_Init+0x88>)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	7013      	strb	r3, [r2, #0]

	// Default State
	TouchState = XPT2046_IDLE;
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <XPT2046_Init+0x8c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

#if (XPT2046_USE_CS == 1)
	HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bcc:	481a      	ldr	r0, [pc, #104]	; (8001c38 <XPT2046_Init+0x90>)
 8001bce:	f001 f8c5 	bl	8002d5c <HAL_GPIO_WritePin>

	//     (     X    )           (     Y 	 )
	// (000 10010)(000 00000) (000 11010)(000 00000) (00000000)
	//	SendBuffer
	// (    0    )(    1    ) (    2    )(    3    ) (    4   )
		ChannelSettingsX = 0b10010000;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <XPT2046_Init+0x94>)
 8001bd4:	2290      	movs	r2, #144	; 0x90
 8001bd6:	701a      	strb	r2, [r3, #0]
		ChannelSettingsY = 0b11010000;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <XPT2046_Init+0x98>)
 8001bda:	22d0      	movs	r2, #208	; 0xd0
 8001bdc:	701a      	strb	r2, [r3, #0]

		SendBuffer[0] = 0x80; // Clear settings in IC
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <XPT2046_Init+0x9c>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	701a      	strb	r2, [r3, #0]
		XPT2046_GetRawData(); // Send clearing command
 8001be4:	f7ff fdf6 	bl	80017d4 <XPT2046_GetRawData>
		HAL_Delay(1); // Wait for clear
 8001be8:	2001      	movs	r0, #1
 8001bea:	f000 fd47 	bl	800267c <HAL_Delay>

		// Fulfill Send Buffer with Channel control bytes
		SendBuffer[0] = (ChannelSettingsX>>3);
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <XPT2046_Init+0x94>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <XPT2046_Init+0x9c>)
 8001bf8:	701a      	strb	r2, [r3, #0]
		SendBuffer[1] = (ChannelSettingsX<<5);
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <XPT2046_Init+0x94>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <XPT2046_Init+0x9c>)
 8001c04:	705a      	strb	r2, [r3, #1]
		SendBuffer[2] = (ChannelSettingsY>>3);
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <XPT2046_Init+0x98>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	08db      	lsrs	r3, r3, #3
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <XPT2046_Init+0x9c>)
 8001c10:	709a      	strb	r2, [r3, #2]
		SendBuffer[3] = (ChannelSettingsY<<5);
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <XPT2046_Init+0x98>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <XPT2046_Init+0x9c>)
 8001c1c:	70da      	strb	r2, [r3, #3]
		SendBuffer[4] = 0;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <XPT2046_Init+0x9c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	711a      	strb	r2, [r3, #4]
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000064 	.word	0x20000064
 8001c30:	20000068 	.word	0x20000068
 8001c34:	200000ad 	.word	0x200000ad
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	20000069 	.word	0x20000069
 8001c40:	2000006a 	.word	0x2000006a
 8001c44:	2000006c 	.word	0x2000006c

08001c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a33      	ldr	r2, [pc, #204]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_GPIO_Init+0x140>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001cd4:	482d      	ldr	r0, [pc, #180]	; (8001d8c <MX_GPIO_Init+0x144>)
 8001cd6:	f001 f841 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	482c      	ldr	r0, [pc, #176]	; (8001d90 <MX_GPIO_Init+0x148>)
 8001ce0:	f001 f83c 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cea:	482a      	ldr	r0, [pc, #168]	; (8001d94 <MX_GPIO_Init+0x14c>)
 8001cec:	f001 f836 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4822      	ldr	r0, [pc, #136]	; (8001d90 <MX_GPIO_Init+0x148>)
 8001d08:	f000 fe7c 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin;
 8001d0c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4819      	ldr	r0, [pc, #100]	; (8001d8c <MX_GPIO_Init+0x144>)
 8001d26:	f000 fe6d 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4813      	ldr	r0, [pc, #76]	; (8001d90 <MX_GPIO_Init+0x148>)
 8001d42:	f000 fe5f 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8001d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480d      	ldr	r0, [pc, #52]	; (8001d94 <MX_GPIO_Init+0x14c>)
 8001d5e:	f000 fe51 	bl	8002a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8001d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <MX_GPIO_Init+0x14c>)
 8001d7c:	f000 fe42 	bl	8002a04 <HAL_GPIO_Init>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40020000 	.word	0x40020000

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9c:	f000 fbfc 	bl	8002598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da0:	f000 f828 	bl	8001df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da4:	f7ff ff50 	bl	8001c48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001da8:	f000 fb5a 	bl	8002460 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001dac:	f000 fa02 	bl	80021b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001db0:	f000 fa36 	bl	8002220 <MX_SPI3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001db4:	f000 f88c 	bl	8001ed0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1);
 8001db8:	480a      	ldr	r0, [pc, #40]	; (8001de4 <main+0x4c>)
 8001dba:	f7ff fcb7 	bl	800172c <ILI9341_Init>

  GFX_SetFont(font_8x5);
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <main+0x50>)
 8001dc0:	f7fe feaa 	bl	8000b18 <GFX_SetFont>
  EF_SetFont(&arialBlack_20ptFontInfo);
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <main+0x54>)
 8001dc6:	f7ff f881 	bl	8000ecc <EF_SetFont>

  XPT2046_Init(&hspi3, EXTI9_5_IRQn);
 8001dca:	2117      	movs	r1, #23
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <main+0x58>)
 8001dce:	f7ff feeb 	bl	8001ba8 <XPT2046_Init>

  ILI9341_ClearDisplay(ILI9341_WHITE);
 8001dd2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dd6:	f7ff fc4d 	bl	8001674 <ILI9341_ClearDisplay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  XPT2046_Task();
 8001dda:	f7ff fe1d 	bl	8001a18 <XPT2046_Task>

	  Paint();
 8001dde:	f000 f9cf 	bl	8002180 <Paint>
	  XPT2046_Task();
 8001de2:	e7fa      	b.n	8001dda <main+0x42>
 8001de4:	2000010c 	.word	0x2000010c
 8001de8:	08006314 	.word	0x08006314
 8001dec:	08006298 	.word	0x08006298
 8001df0:	200000b4 	.word	0x200000b4

08001df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b094      	sub	sp, #80	; 0x50
 8001df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	2234      	movs	r2, #52	; 0x34
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fa76 	bl	80042f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <SystemClock_Config+0xd4>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	4a29      	ldr	r2, [pc, #164]	; (8001ec8 <SystemClock_Config+0xd4>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <SystemClock_Config+0xd4>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <SystemClock_Config+0xd8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <SystemClock_Config+0xd8>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <SystemClock_Config+0xd8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2302      	movs	r3, #2
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e68:	2310      	movs	r3, #16
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e72:	2304      	movs	r3, #4
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e76:	2302      	movs	r3, #2
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 fa68 	bl	8003358 <HAL_RCC_OscConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e8e:	f000 f83a 	bl	8001f06 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e92:	230f      	movs	r3, #15
 8001e94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e96:	2302      	movs	r3, #2
 8001e98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	2102      	movs	r1, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ff86 	bl	8002dc0 <HAL_RCC_ClockConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001eba:	f000 f824 	bl	8001f06 <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3750      	adds	r7, #80	; 0x50
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2017      	movs	r0, #23
 8001eda:	f000 fd32 	bl	8002942 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ede:	2017      	movs	r0, #23
 8001ee0:	f000 fd4b 	bl	800297a <HAL_NVIC_EnableIRQ>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TOUCH_IRQ_Pin)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_EXTI_Callback+0x16>
	{
		XPT2046_IRQ();
 8001efa:	f7ff fe49 	bl	8001b90 <XPT2046_IRQ>
	}
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0a:	b672      	cpsid	i
}
 8001f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <Error_Handler+0x8>

08001f10 <ColorIndicator>:

//
// Draw Color indicator as Circle above the drawing area
//
static void ColorIndicator(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	GFX_DrawFillCircle(ILI9341_TFTWIDTH/2, 15, 12, CurrentColor); // Drawing circle with GFX Library
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <ColorIndicator+0x18>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	220c      	movs	r2, #12
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	20a0      	movs	r0, #160	; 0xa0
 8001f1e:	f7fe ffb1 	bl	8000e84 <GFX_DrawFillCircle>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000007c 	.word	0x2000007c

08001f2c <ClearButton>:

//
// Draw Clearing Button above the drawing area
//
static void ClearButton(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af02      	add	r7, sp, #8
	GFX_DrawFillRectangle(CLEAR_BUTTON_X, CLEAR_BUTTON_Y, CLEAR_BUTTON_WIDTH, CLEAR_BUTTON_HEIGHT, ILI9341_DARKGREEN); // Button Color
 8001f32:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	231a      	movs	r3, #26
 8001f3a:	2278      	movs	r2, #120	; 0x78
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	20be      	movs	r0, #190	; 0xbe
 8001f40:	f7fe fee1 	bl	8000d06 <GFX_DrawFillRectangle>
	  //ILI9341_ClearArea(CLEAR_BUTTON_X, CLEAR_BUTTON_Y, CLEAR_BUTTON_WIDTH, CLEAR_BUTTON_HEIGHT, ILI9341_DARKGREEN); // Homework - to write this function in TFT library
	EF_PutString((const uint8_t*)"CZYŚĆ", CLEAR_BUTTON_X+5, CLEAR_BUTTON_Y, ILI9341_WHITE, BG_TRANSPARENT, ILI9341_DARKGREEN); // Button text
 8001f44:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f52:	2203      	movs	r2, #3
 8001f54:	21c3      	movs	r1, #195	; 0xc3
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <ClearButton+0x38>)
 8001f58:	f7ff f9d2 	bl	8001300 <EF_PutString>
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	0800431c 	.word	0x0800431c

08001f68 <ColorButtons>:

//
// Draw each button for color change in one loop
//
static void ColorButtons(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af02      	add	r7, sp, #8
	uint8_t i;
	for(i = 1; i <= USED_COLORS; i++) // For each color
 8001f6e:	2301      	movs	r3, #1
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	e013      	b.n	8001f9c <ColorButtons+0x34>
	{
		GFX_DrawFillRectangle((i*(ILI9341_TFTWIDTH/(USED_COLORS+1)))-(COLOR_BUTTON_WIDTH/2), ILI9341_TFTHEIGHT-25, COLOR_BUTTON_WIDTH, COLOR_BUTTON_HEIGHT, UsedColors[i-1]);
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2235      	movs	r2, #53	; 0x35
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	f1a3 0012 	sub.w	r0, r3, #18
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <ColorButtons+0x44>)
 8001f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2314      	movs	r3, #20
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	21d7      	movs	r1, #215	; 0xd7
 8001f92:	f7fe feb8 	bl	8000d06 <GFX_DrawFillRectangle>
	for(i = 1; i <= USED_COLORS; i++) // For each color
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d9e8      	bls.n	8001f74 <ColorButtons+0xc>
		//					(i*(ILI9341_TFTWIDTH/(USED_COLORS+1))) - define a middle of each button. That's why (USED_COLORS+1)
		//					-(COLOR_BUTTON_WIDTH/2) - Move back by half of button.

		//ILI9341_ClearArea((i*(ILI9341_TFTWIDTH/(USED_COLORS+1)))-(BUTTON_WIDTH/2), ILI9341_TFTHEIGHT-25, BUTTON_WIDTH, BUTTON_HEIGHT, UsedColors[i-1]);
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000030 	.word	0x20000030

08001fb0 <IsColorButtonTouched>:

static uint8_t IsColorButtonTouched(uint16_t x, uint16_t y)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	80fb      	strh	r3, [r7, #6]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	80bb      	strh	r3, [r7, #4]
	uint8_t i;
	for(i = 1; i <= USED_COLORS; i++) // For each color used
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
 8001fc4:	e01c      	b.n	8002000 <IsColorButtonTouched+0x50>
	{
		 // Check if Touch point is higher than X begin of current color button
		if(x > (i*(ILI9341_TFTWIDTH/(USED_COLORS+1)))-(COLOR_BUTTON_WIDTH/2))
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	2235      	movs	r2, #53	; 0x35
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	f1a3 0211 	sub.w	r2, r3, #17
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dc10      	bgt.n	8001ffa <IsColorButtonTouched+0x4a>
		{
			 // Check if Touch point is lower than X end of current color button
			if(x < (i*(ILI9341_TFTWIDTH/(USED_COLORS+1)))+(COLOR_BUTTON_WIDTH/2))
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2235      	movs	r2, #53	; 0x35
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	f103 0211 	add.w	r2, r3, #17
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	db07      	blt.n	8001ffa <IsColorButtonTouched+0x4a>
			{
				// Check if Touch point is higher than Y begin of current color button
				if(y > ILI9341_TFTHEIGHT-25)
 8001fea:	88bb      	ldrh	r3, [r7, #4]
 8001fec:	2bd7      	cmp	r3, #215	; 0xd7
 8001fee:	d904      	bls.n	8001ffa <IsColorButtonTouched+0x4a>
				{
					// Check if Touch point is lower than Y end of current color button
					if(y < (ILI9341_TFTHEIGHT-25+COLOR_BUTTON_HEIGHT))
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	2bea      	cmp	r3, #234	; 0xea
 8001ff4:	d801      	bhi.n	8001ffa <IsColorButtonTouched+0x4a>
					{
						// If we are sure that touched point was inside current (i) button - return button number
						return i;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	e006      	b.n	8002008 <IsColorButtonTouched+0x58>
	for(i = 1; i <= USED_COLORS; i++) // For each color used
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d9df      	bls.n	8001fc6 <IsColorButtonTouched+0x16>
				}
			}
		}
	}
	// If no color button touched
	return 0;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <IsClearButtonTouched>:

uint8_t IsClearButtonTouched(uint16_t x, uint16_t y)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	460a      	mov	r2, r1
 800201e:	80fb      	strh	r3, [r7, #6]
 8002020:	4613      	mov	r3, r2
 8002022:	80bb      	strh	r3, [r7, #4]
	// Check if Touch point is higher than X begin of clear button
	if(x > CLEAR_BUTTON_X)
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	2bbe      	cmp	r3, #190	; 0xbe
 8002028:	d90b      	bls.n	8002042 <IsClearButtonTouched+0x2e>
	{
		// Check if Touch point is higher than X end of clear button
		if(x < (CLEAR_BUTTON_X + CLEAR_BUTTON_WIDTH))
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002030:	d207      	bcs.n	8002042 <IsClearButtonTouched+0x2e>
		{
			// Check if Touch point is higher than Y begin of clear button
			if(y > CLEAR_BUTTON_Y)
 8002032:	88bb      	ldrh	r3, [r7, #4]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d904      	bls.n	8002042 <IsClearButtonTouched+0x2e>
			{
				// Check if Touch point is higher than Y end of clear button
				if(y < (CLEAR_BUTTON_Y+CLEAR_BUTTON_HEIGHT))
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	2b1c      	cmp	r3, #28
 800203c:	d801      	bhi.n	8002042 <IsClearButtonTouched+0x2e>
				{
					// If we are sure that touched point was inside clear button - return 1
					return 1;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <IsClearButtonTouched+0x30>
				}
			}
		}
	}
	// If clear button is not touched
	return 0;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <InitScreen>:

//
// PAINT_INIT state function
//
static void InitScreen(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af02      	add	r7, sp, #8
	// Clear whole display
	ILI9341_ClearDisplay(ILI9341_WHITE);
 8002056:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800205a:	f7ff fb0b 	bl	8001674 <ILI9341_ClearDisplay>
	// Title
	EF_PutString((const uint8_t*)"Paint", 5, 2, ILI9341_BLACK, BG_TRANSPARENT, ILI9341_GREEN);
 800205e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	2202      	movs	r2, #2
 800206c:	2105      	movs	r1, #5
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <InitScreen+0x50>)
 8002070:	f7ff f946 	bl	8001300 <EF_PutString>
	// Drawing area
	GFX_DrawRectangle(0, 30, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT-60, ILI9341_BLACK);
 8002074:	2300      	movs	r3, #0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	23b4      	movs	r3, #180	; 0xb4
 800207a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800207e:	211e      	movs	r1, #30
 8002080:	2000      	movs	r0, #0
 8002082:	f7fe fe13 	bl	8000cac <GFX_DrawRectangle>
	// Current color indicator
	ColorIndicator();
 8002086:	f7ff ff43 	bl	8001f10 <ColorIndicator>
	// Clear button
	ClearButton();
 800208a:	f7ff ff4f 	bl	8001f2c <ClearButton>
	// Color buttons
	ColorButtons();
 800208e:	f7ff ff6b 	bl	8001f68 <ColorButtons>

	State = PAINT_DRAW;
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <InitScreen+0x54>)
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	08004324 	.word	0x08004324
 80020a4:	2000007a 	.word	0x2000007a

080020a8 <DrawScreen>:

//
// PAINT_DRAW state function
//
static void DrawScreen(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
	// Check if screen was touched
	if(XPT2046_IsTouched())
 80020ae:	f7ff fca1 	bl	80019f4 <XPT2046_IsTouched>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03b      	beq.n	8002130 <DrawScreen+0x88>
	{
		uint16_t x, y; // Touch points
		uint8_t ColorButtonNubmer; // Color number touched for checking that

		XPT2046_GetTouchPoint(&x, &y); // Get the current couched point
 80020b8:	1cba      	adds	r2, r7, #2
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc62 	bl	8001988 <XPT2046_GetTouchPoint>

		// Check if that point is inside the drawing area
		if((x > DRAW_WINDOW_X_START)&&(x < DRAW_WINDOW_X_STOP)&&(y > DRAW_WINDOW_Y_START)&&(y < DRAW_WINDOW_Y_STOP))
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d012      	beq.n	80020f0 <DrawScreen+0x48>
 80020ca:	88bb      	ldrh	r3, [r7, #4]
 80020cc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020d0:	d20e      	bcs.n	80020f0 <DrawScreen+0x48>
 80020d2:	887b      	ldrh	r3, [r7, #2]
 80020d4:	2b1e      	cmp	r3, #30
 80020d6:	d90b      	bls.n	80020f0 <DrawScreen+0x48>
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	2bd1      	cmp	r3, #209	; 0xd1
 80020dc:	d808      	bhi.n	80020f0 <DrawScreen+0x48>
		{
			// If yes - just draw a pixel there with current selected color
			GFX_DrawPixel(x, y, CurrentColor);
 80020de:	88bb      	ldrh	r3, [r7, #4]
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	b211      	sxth	r1, r2
 80020e6:	4a14      	ldr	r2, [pc, #80]	; (8002138 <DrawScreen+0x90>)
 80020e8:	8812      	ldrh	r2, [r2, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fa8f 	bl	800160e <ILI9341_WritePixel>
		}

		// Check if any Color change button was touched
		ColorButtonNubmer = IsColorButtonTouched(x, y);
 80020f0:	88bb      	ldrh	r3, [r7, #4]
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff5a 	bl	8001fb0 <IsColorButtonTouched>
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
		if(ColorButtonNubmer != 0) // If yes
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <DrawScreen+0x70>
		{
			// Change current color
			CurrentColor = UsedColors[ColorButtonNubmer-1];
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	3b01      	subs	r3, #1
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <DrawScreen+0x94>)
 800210c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <DrawScreen+0x90>)
 8002112:	801a      	strh	r2, [r3, #0]
			// Redraw current color indicator
			ColorIndicator();
 8002114:	f7ff fefc 	bl	8001f10 <ColorIndicator>
		}

		// Check if any Clearing button was touched
		if(IsClearButtonTouched(x, y))
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	887a      	ldrh	r2, [r7, #2]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff78 	bl	8002014 <IsClearButtonTouched>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <DrawScreen+0x88>
		{
			// Jump to Clearing state
			State = PAINT_CLEAR;
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <DrawScreen+0x98>)
 800212c:	2202      	movs	r2, #2
 800212e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	2000007c 	.word	0x2000007c
 800213c:	20000030 	.word	0x20000030
 8002140:	2000007a 	.word	0x2000007a

08002144 <DrawClear>:

//
// PAINT_CLEAR state function
//
void DrawClear(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af02      	add	r7, sp, #8
	// Clear whole drawing area
	GFX_DrawFillRectangle(0, 30, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT-60, ILI9341_WHITE);
 800214a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	23b4      	movs	r3, #180	; 0xb4
 8002152:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002156:	211e      	movs	r1, #30
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe fdd4 	bl	8000d06 <GFX_DrawFillRectangle>
	//ILI9341_ClearArea(0, 30, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT-60, ILI9341_WHITE);

	// Redraw frame for the drawing area
	GFX_DrawRectangle(0, 30, ILI9341_TFTWIDTH, ILI9341_TFTHEIGHT-60, ILI9341_BLACK);
 800215e:	2300      	movs	r3, #0
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	23b4      	movs	r3, #180	; 0xb4
 8002164:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002168:	211e      	movs	r1, #30
 800216a:	2000      	movs	r0, #0
 800216c:	f7fe fd9e 	bl	8000cac <GFX_DrawRectangle>
	// Go back to Drawing state
	State = PAINT_DRAW;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <DrawClear+0x38>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000007a 	.word	0x2000007a

08002180 <Paint>:

void Paint(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	switch(State)
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <Paint+0x30>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d00c      	beq.n	80021a6 <Paint+0x26>
 800218c:	2b02      	cmp	r3, #2
 800218e:	dc0d      	bgt.n	80021ac <Paint+0x2c>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <Paint+0x1a>
 8002194:	2b01      	cmp	r3, #1
 8002196:	d003      	beq.n	80021a0 <Paint+0x20>
		  break;
	case PAINT_CLEAR:
		DrawClear();
		break;
	}
}
 8002198:	e008      	b.n	80021ac <Paint+0x2c>
		InitScreen();
 800219a:	f7ff ff59 	bl	8002050 <InitScreen>
		break;
 800219e:	e005      	b.n	80021ac <Paint+0x2c>
		DrawScreen();
 80021a0:	f7ff ff82 	bl	80020a8 <DrawScreen>
		  break;
 80021a4:	e002      	b.n	80021ac <Paint+0x2c>
		DrawClear();
 80021a6:	f7ff ffcd 	bl	8002144 <DrawClear>
		break;
 80021aa:	bf00      	nop
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000007a 	.word	0x2000007a

080021b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80021b8:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_SPI1_Init+0x64>)
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <MX_SPI1_Init+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_SPI1_Init+0x64>)
 80021c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_SPI1_Init+0x64>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_SPI1_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_SPI1_Init+0x64>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_SPI1_Init+0x64>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_SPI1_Init+0x64>)
 80021e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_SPI1_Init+0x64>)
 80021e8:	2210      	movs	r2, #16
 80021ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MX_SPI1_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_SPI1_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <MX_SPI1_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_SPI1_Init+0x64>)
 8002200:	220a      	movs	r2, #10
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <MX_SPI1_Init+0x64>)
 8002206:	f001 fb45 	bl	8003894 <HAL_SPI_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002210:	f7ff fe79 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000010c 	.word	0x2000010c
 800221c:	40013000 	.word	0x40013000

08002220 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <MX_SPI3_Init+0x64>)
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <MX_SPI3_Init+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_SPI3_Init+0x64>)
 800222c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002230:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <MX_SPI3_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_SPI3_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_SPI3_Init+0x64>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_SPI3_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_SPI3_Init+0x64>)
 800224c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002250:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_SPI3_Init+0x64>)
 8002254:	2220      	movs	r2, #32
 8002256:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <MX_SPI3_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_SPI3_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <MX_SPI3_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_SPI3_Init+0x64>)
 800226c:	220a      	movs	r2, #10
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_SPI3_Init+0x64>)
 8002272:	f001 fb0f 	bl	8003894 <HAL_SPI_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800227c:	f7ff fe43 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200000b4 	.word	0x200000b4
 8002288:	40003c00 	.word	0x40003c00

0800228c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_SPI_MspInit+0xe8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d12c      	bne.n	8002308 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_SPI_MspInit+0xec>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a30      	ldr	r2, [pc, #192]	; (8002378 <HAL_SPI_MspInit+0xec>)
 80022b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_SPI_MspInit+0xec>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_SPI_MspInit+0xec>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_SPI_MspInit+0xec>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_SPI_MspInit+0xec>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022e6:	23e0      	movs	r3, #224	; 0xe0
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f6:	2305      	movs	r3, #5
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	481e      	ldr	r0, [pc, #120]	; (800237c <HAL_SPI_MspInit+0xf0>)
 8002302:	f000 fb7f 	bl	8002a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002306:	e030      	b.n	800236a <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_SPI_MspInit+0xf4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12b      	bne.n	800236a <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_SPI_MspInit+0xec>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_SPI_MspInit+0xec>)
 800231c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_SPI_MspInit+0xec>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_SPI_MspInit+0xec>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <HAL_SPI_MspInit+0xec>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_SPI_MspInit+0xec>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800234a:	2338      	movs	r3, #56	; 0x38
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800235a:	2306      	movs	r3, #6
 800235c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	4807      	ldr	r0, [pc, #28]	; (8002384 <HAL_SPI_MspInit+0xf8>)
 8002366:	f000 fb4d 	bl	8002a04 <HAL_GPIO_Init>
}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40013000 	.word	0x40013000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020000 	.word	0x40020000
 8002380:	40003c00 	.word	0x40003c00
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_MspInit+0x4c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <HAL_MspInit+0x4c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_MspInit+0x4c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_MspInit+0x4c>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023c6:	2007      	movs	r0, #7
 80023c8:	f000 fab0 	bl	800292c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <NMI_Handler+0x4>

080023de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <HardFault_Handler+0x4>

080023e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <MemManage_Handler+0x4>

080023ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002424:	f000 f90a 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_IRQ_Pin);
 8002430:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002434:	f000 fcac 	bl	8002d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <SystemInit+0x20>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <SystemInit+0x20>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <MX_USART2_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002498:	f001 fcf2 	bl	8003e80 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f7ff fd30 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000164 	.word	0x20000164
 80024b0:	40004400 	.word	0x40004400

080024b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_UART_MspInit+0x84>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_UART_MspInit+0x88>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_UART_MspInit+0x88>)
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_UART_MspInit+0x88>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_UART_MspInit+0x88>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_UART_MspInit+0x88>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_UART_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800250e:	230c      	movs	r3, #12
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251e:	2307      	movs	r3, #7
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_UART_MspInit+0x8c>)
 800252a:	f000 fa6b 	bl	8002a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40004400 	.word	0x40004400
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254a:	490e      	ldr	r1, [pc, #56]	; (8002584 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800254c:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002560:	4c0b      	ldr	r4, [pc, #44]	; (8002590 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800256e:	f7ff ff65 	bl	800243c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f001 fe9b 	bl	80042ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7ff fc0f 	bl	8001d98 <main>
  bx  lr    
 800257a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800257c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002584:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002588:	0800651c 	.word	0x0800651c
  ldr r2, =_sbss
 800258c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002590:	200001ac 	.word	0x200001ac

08002594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC_IRQHandler>
	...

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 f9b3 	bl	800292c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fedc 	bl	8002388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f9d9 	bl	80029b2 <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f000 f993 	bl	8002942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000003c 	.word	0x2000003c
 8002634:	20000044 	.word	0x20000044
 8002638:	20000040 	.word	0x20000040

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000044 	.word	0x20000044
 8002660:	200001a8 	.word	0x200001a8

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200001a8 	.word	0x200001a8

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000044 	.word	0x20000044

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4907      	ldr	r1, [pc, #28]	; (8002760 <__NVIC_EnableIRQ+0x38>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000e100 	.word	0xe000e100

08002764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db12      	blt.n	800279c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	490a      	ldr	r1, [pc, #40]	; (80027a8 <__NVIC_DisableIRQ+0x44>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	3320      	adds	r3, #32
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002790:	f3bf 8f4f 	dsb	sy
}
 8002794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002796:	f3bf 8f6f 	isb	sy
}
 800279a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0e      	blt.n	80027dc <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <__NVIC_GetPendingIRQ+0x40>)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	3340      	adds	r3, #64	; 0x40
 80027c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	e000      	b.n	80027de <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80027dc:	2300      	movs	r3, #0
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0c      	blt.n	800281c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	; (8002828 <__NVIC_ClearPendingIRQ+0x38>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	3360      	adds	r3, #96	; 0x60
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	; (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	; (800287c <__NVIC_SetPriority+0x50>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
         );
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028f8:	d301      	bcc.n	80028fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00f      	b.n	800291e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <SysTick_Config+0x40>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002906:	210f      	movs	r1, #15
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f7ff ff8e 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <SysTick_Config+0x40>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SysTick_Config+0x40>)
 8002918:	2207      	movs	r2, #7
 800291a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	e000e010 	.word	0xe000e010

0800292c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fec5 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002954:	f7ff feda 	bl	800270c <__NVIC_GetPriorityGrouping>
 8002958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff8e 	bl	8002880 <NVIC_EncodePriority>
 8002964:	4602      	mov	r2, r0
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fecd 	bl	8002728 <__NVIC_EnableIRQ>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fedd 	bl	8002764 <__NVIC_DisableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff94 	bl	80028e8 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4603      	mov	r3, r0
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fee7 	bl	80027ac <__NVIC_GetPendingIRQ>
 80029de:	4603      	mov	r3, r0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fefa 	bl	80027f0 <__NVIC_ClearPendingIRQ>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	e165      	b.n	8002cec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f040 8154 	bne.w	8002ce6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d005      	beq.n	8002a56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d130      	bne.n	8002ab8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 0201 	and.w	r2, r3, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d017      	beq.n	8002af4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d123      	bne.n	8002b48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	08da      	lsrs	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3208      	adds	r2, #8
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	220f      	movs	r2, #15
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80ae 	beq.w	8002ce6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <HAL_GPIO_Init+0x300>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a5c      	ldr	r2, [pc, #368]	; (8002d04 <HAL_GPIO_Init+0x300>)
 8002b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_GPIO_Init+0x300>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba6:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_GPIO_Init+0x304>)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4f      	ldr	r2, [pc, #316]	; (8002d0c <HAL_GPIO_Init+0x308>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x21a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4e      	ldr	r2, [pc, #312]	; (8002d10 <HAL_GPIO_Init+0x30c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x216>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4d      	ldr	r2, [pc, #308]	; (8002d14 <HAL_GPIO_Init+0x310>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x212>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4c      	ldr	r2, [pc, #304]	; (8002d18 <HAL_GPIO_Init+0x314>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x20e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4b      	ldr	r2, [pc, #300]	; (8002d1c <HAL_GPIO_Init+0x318>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x20a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4a      	ldr	r2, [pc, #296]	; (8002d20 <HAL_GPIO_Init+0x31c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x206>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_GPIO_Init+0x320>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x202>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x21c>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	; (8002d08 <HAL_GPIO_Init+0x304>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c3e:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c62:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c68:	4b2f      	ldr	r3, [pc, #188]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8c:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <HAL_GPIO_Init+0x324>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f ae96 	bls.w	8002a20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40021400 	.word	0x40021400
 8002d24:	40021800 	.word	0x40021800
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	887b      	ldrh	r3, [r7, #2]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d44:	2301      	movs	r3, #1
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e001      	b.n	8002d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da6:	4a05      	ldr	r2, [pc, #20]	; (8002dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f89a 	bl	8001ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0cc      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d90c      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b63      	ldr	r3, [pc, #396]	; (8002f78 <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0b8      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d020      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e14:	4b59      	ldr	r3, [pc, #356]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e2c:	4b53      	ldr	r3, [pc, #332]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e38:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	494d      	ldr	r1, [pc, #308]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d044      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	4b47      	ldr	r3, [pc, #284]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d119      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07f      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06f      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e067      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 0203 	bic.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	4934      	ldr	r1, [pc, #208]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb0:	f7ff fbd8 	bl	8002664 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb8:	f7ff fbd4 	bl	8002664 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e04f      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ece:	4b2b      	ldr	r3, [pc, #172]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 020c 	and.w	r2, r3, #12
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1eb      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d20c      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e032      	b.n	8002f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b19      	ldr	r3, [pc, #100]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4916      	ldr	r1, [pc, #88]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	490e      	ldr	r1, [pc, #56]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f46:	f000 f855 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	490a      	ldr	r1, [pc, #40]	; (8002f80 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	5ccb      	ldrb	r3, [r1, r3]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fb38 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023c00 	.word	0x40023c00
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	080064f4 	.word	0x080064f4
 8002f84:	2000003c 	.word	0x2000003c
 8002f88:	20000040 	.word	0x20000040

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	2000003c 	.word	0x2000003c

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	08006504 	.word	0x08006504

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffdc 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0b5b      	lsrs	r3, r3, #13
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08006504 	.word	0x08006504

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b088      	sub	sp, #32
 8002ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003010:	4bce      	ldr	r3, [pc, #824]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b0c      	cmp	r3, #12
 800301a:	f200 818d 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x344>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_RCC_GetSysClockFreq+0x30>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003059 	.word	0x08003059
 8003028:	08003339 	.word	0x08003339
 800302c:	08003339 	.word	0x08003339
 8003030:	08003339 	.word	0x08003339
 8003034:	0800305f 	.word	0x0800305f
 8003038:	08003339 	.word	0x08003339
 800303c:	08003339 	.word	0x08003339
 8003040:	08003339 	.word	0x08003339
 8003044:	08003065 	.word	0x08003065
 8003048:	08003339 	.word	0x08003339
 800304c:	08003339 	.word	0x08003339
 8003050:	08003339 	.word	0x08003339
 8003054:	080031d9 	.word	0x080031d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003058:	4bbd      	ldr	r3, [pc, #756]	; (8003350 <HAL_RCC_GetSysClockFreq+0x35c>)
 800305a:	61bb      	str	r3, [r7, #24]
       break;
 800305c:	e16f      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800305e:	4bbd      	ldr	r3, [pc, #756]	; (8003354 <HAL_RCC_GetSysClockFreq+0x360>)
 8003060:	61bb      	str	r3, [r7, #24]
      break;
 8003062:	e16c      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003064:	4bb9      	ldr	r3, [pc, #740]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800306c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306e:	4bb7      	ldr	r3, [pc, #732]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d053      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4bb4      	ldr	r3, [pc, #720]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	461a      	mov	r2, r3
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	ea02 0400 	and.w	r4, r2, r0
 8003092:	603c      	str	r4, [r7, #0]
 8003094:	400b      	ands	r3, r1
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	e9d7 4500 	ldrd	r4, r5, [r7]
 800309c:	4620      	mov	r0, r4
 800309e:	4629      	mov	r1, r5
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	014b      	lsls	r3, r1, #5
 80030aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030ae:	0142      	lsls	r2, r0, #5
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	4623      	mov	r3, r4
 80030b6:	1ac0      	subs	r0, r0, r3
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb61 0103 	sbc.w	r1, r1, r3
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	018b      	lsls	r3, r1, #6
 80030c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030cc:	0182      	lsls	r2, r0, #6
 80030ce:	1a12      	subs	r2, r2, r0
 80030d0:	eb63 0301 	sbc.w	r3, r3, r1
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f04f 0100 	mov.w	r1, #0
 80030dc:	00d9      	lsls	r1, r3, #3
 80030de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e2:	00d0      	lsls	r0, r2, #3
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4621      	mov	r1, r4
 80030ea:	1852      	adds	r2, r2, r1
 80030ec:	4629      	mov	r1, r5
 80030ee:	eb43 0101 	adc.w	r1, r3, r1
 80030f2:	460b      	mov	r3, r1
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	0259      	lsls	r1, r3, #9
 80030fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003102:	0250      	lsls	r0, r2, #9
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	461a      	mov	r2, r3
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f7fd fb84 	bl	8000820 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e04c      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003122:	4b8a      	ldr	r3, [pc, #552]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	461a      	mov	r2, r3
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	ea02 0a00 	and.w	sl, r2, r0
 800313a:	ea03 0b01 	and.w	fp, r3, r1
 800313e:	4650      	mov	r0, sl
 8003140:	4659      	mov	r1, fp
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	014b      	lsls	r3, r1, #5
 800314c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003150:	0142      	lsls	r2, r0, #5
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	ebb0 000a 	subs.w	r0, r0, sl
 800315a:	eb61 010b 	sbc.w	r1, r1, fp
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	018b      	lsls	r3, r1, #6
 8003168:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316c:	0182      	lsls	r2, r0, #6
 800316e:	1a12      	subs	r2, r2, r0
 8003170:	eb63 0301 	sbc.w	r3, r3, r1
 8003174:	f04f 0000 	mov.w	r0, #0
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	00d9      	lsls	r1, r3, #3
 800317e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003182:	00d0      	lsls	r0, r2, #3
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	eb12 020a 	adds.w	r2, r2, sl
 800318c:	eb43 030b 	adc.w	r3, r3, fp
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0299      	lsls	r1, r3, #10
 800319a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800319e:	0290      	lsls	r0, r2, #10
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f7fd fb36 	bl	8000820 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031bc:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	61bb      	str	r3, [r7, #24]
      break;
 80031d6:	e0b2      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e2:	4b5a      	ldr	r3, [pc, #360]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d04d      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b57      	ldr	r3, [pc, #348]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	461a      	mov	r2, r3
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	ea02 0800 	and.w	r8, r2, r0
 8003206:	ea03 0901 	and.w	r9, r3, r1
 800320a:	4640      	mov	r0, r8
 800320c:	4649      	mov	r1, r9
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	014b      	lsls	r3, r1, #5
 8003218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800321c:	0142      	lsls	r2, r0, #5
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	ebb0 0008 	subs.w	r0, r0, r8
 8003226:	eb61 0109 	sbc.w	r1, r1, r9
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	018b      	lsls	r3, r1, #6
 8003234:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003238:	0182      	lsls	r2, r0, #6
 800323a:	1a12      	subs	r2, r2, r0
 800323c:	eb63 0301 	sbc.w	r3, r3, r1
 8003240:	f04f 0000 	mov.w	r0, #0
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	00d9      	lsls	r1, r3, #3
 800324a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800324e:	00d0      	lsls	r0, r2, #3
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	eb12 0208 	adds.w	r2, r2, r8
 8003258:	eb43 0309 	adc.w	r3, r3, r9
 800325c:	f04f 0000 	mov.w	r0, #0
 8003260:	f04f 0100 	mov.w	r1, #0
 8003264:	0259      	lsls	r1, r3, #9
 8003266:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800326a:	0250      	lsls	r0, r2, #9
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	461a      	mov	r2, r3
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f7fd fad0 	bl	8000820 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]
 8003288:	e04a      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800328a:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	099b      	lsrs	r3, r3, #6
 8003290:	461a      	mov	r2, r3
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	ea02 0400 	and.w	r4, r2, r0
 80032a2:	ea03 0501 	and.w	r5, r3, r1
 80032a6:	4620      	mov	r0, r4
 80032a8:	4629      	mov	r1, r5
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032b8:	0142      	lsls	r2, r0, #5
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	1b00      	subs	r0, r0, r4
 80032c0:	eb61 0105 	sbc.w	r1, r1, r5
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	018b      	lsls	r3, r1, #6
 80032ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032d2:	0182      	lsls	r2, r0, #6
 80032d4:	1a12      	subs	r2, r2, r0
 80032d6:	eb63 0301 	sbc.w	r3, r3, r1
 80032da:	f04f 0000 	mov.w	r0, #0
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	00d9      	lsls	r1, r3, #3
 80032e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032e8:	00d0      	lsls	r0, r2, #3
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	1912      	adds	r2, r2, r4
 80032f0:	eb45 0303 	adc.w	r3, r5, r3
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	0299      	lsls	r1, r3, #10
 80032fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003302:	0290      	lsls	r0, r2, #10
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	461a      	mov	r2, r3
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	f7fd fa84 	bl	8000820 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_GetSysClockFreq+0x358>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0f1b      	lsrs	r3, r3, #28
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	61bb      	str	r3, [r7, #24]
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetSysClockFreq+0x35c>)
 800333a:	61bb      	str	r3, [r7, #24]
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	69bb      	ldr	r3, [r7, #24]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400
 8003354:	007a1200 	.word	0x007a1200

08003358 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e28d      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8083 	beq.w	800347e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003378:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	d019      	beq.n	80033b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003384:	4b91      	ldr	r3, [pc, #580]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800338c:	2b08      	cmp	r3, #8
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003390:	4b8e      	ldr	r3, [pc, #568]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b8b      	ldr	r3, [pc, #556]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80033a6:	2b0c      	cmp	r3, #12
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b84      	ldr	r3, [pc, #528]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x124>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e25a      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x90>
 80033da:	4b7c      	ldr	r3, [pc, #496]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7b      	ldr	r2, [pc, #492]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xcc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xb4>
 80033f2:	4b76      	ldr	r3, [pc, #472]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a72      	ldr	r2, [pc, #456]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xcc>
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6e      	ldr	r2, [pc, #440]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b6c      	ldr	r3, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6b      	ldr	r2, [pc, #428]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7ff f91a 	bl	8002664 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7ff f916 	bl	8002664 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e21f      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b61      	ldr	r3, [pc, #388]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xdc>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7ff f906 	bl	8002664 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7ff f902 	bl	8002664 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e20b      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x104>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06f      	beq.n	800356a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800348a:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d017      	beq.n	80034c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003496:	4b4d      	ldr	r3, [pc, #308]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d105      	bne.n	80034ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034a2:	4b4a      	ldr	r3, [pc, #296]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80034b6:	2b0c      	cmp	r3, #12
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x186>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1d3      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x278>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7ff f8af 	bl	8002664 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7ff f8ab 	bl	8002664 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1b4      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_RCC_OscConfig+0x278>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7ff f88e 	bl	8002664 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7ff f88a 	bl	8002664 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e193      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_RCC_OscConfig+0x27c>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7ff f86e 	bl	8002664 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7ff f86a 	bl	8002664 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e173      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x234>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7ff f857 	bl	8002664 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7ff f853 	bl	8002664 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e15c      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b8a      	ldr	r3, [pc, #552]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b83      	ldr	r3, [pc, #524]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	4a7e      	ldr	r2, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	; 0x40
 8003612:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b76      	ldr	r3, [pc, #472]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a75      	ldr	r2, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7ff f813 	bl	8002664 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7ff f80f 	bl	8002664 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e118      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <HAL_RCC_OscConfig+0x4b0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x31e>
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x358>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x340>
 800367e:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a60      	ldr	r2, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
 800368a:	4b5e      	ldr	r3, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5d      	ldr	r2, [pc, #372]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x358>
 8003698:	4b5a      	ldr	r3, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	4a59      	ldr	r2, [pc, #356]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	; 0x70
 80036a4:	4b57      	ldr	r3, [pc, #348]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a56      	ldr	r2, [pc, #344]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe ffd4 	bl	8002664 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe ffd0 	bl	8002664 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0d7      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x368>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe ffbe 	bl	8002664 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe ffba 	bl	8002664 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0c1      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b40      	ldr	r3, [pc, #256]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80ad 	beq.w	8003884 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d060      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d145      	bne.n	80037ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x4b4>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe ff8e 	bl	8002664 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe ff8a 	bl	8002664 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e093      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	071b      	lsls	r3, r3, #28
 8003796:	491b      	ldr	r1, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x4b4>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe ff5f 	bl	8002664 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fe ff5b 	bl	8002664 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e064      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x452>
 80037c8:	e05c      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x4b4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fe ff48 	bl	8002664 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe ff44 	bl	8002664 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e04d      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x480>
 80037f6:	e045      	b.n	8003884 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e040      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
 8003804:	40023800 	.word	0x40023800
 8003808:	40007000 	.word	0x40007000
 800380c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HAL_RCC_OscConfig+0x538>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d030      	beq.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003828:	429a      	cmp	r2, r3
 800382a:	d129      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d122      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003840:	4013      	ands	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003848:	4293      	cmp	r3, r2
 800384a:	d119      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	3b01      	subs	r3, #1
 800385a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385c:	429a      	cmp	r2, r3
 800385e:	d10f      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386c:	429a      	cmp	r2, r3
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800

08003894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07b      	b.n	800399e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b6:	d009      	beq.n	80038cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
 80038be:	e005      	b.n	80038cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fe fcd0 	bl	800228c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003902:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	ea42 0103 	orr.w	r1, r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0104 	and.w	r1, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0210 	and.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69da      	ldr	r2, [r3, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08c      	sub	sp, #48	; 0x30
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039b4:	2301      	movs	r3, #1
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_SPI_TransmitReceive+0x26>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e18a      	b.n	8003ce2 <HAL_SPI_TransmitReceive+0x33c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d4:	f7fe fe46 	bl	8002664 <HAL_GetTick>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d00f      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x70>
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039fc:	d107      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <HAL_SPI_TransmitReceive+0x68>
 8003a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d003      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a14:	e15b      	b.n	8003cce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x82>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x82>
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d103      	bne.n	8003a30 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a2e:	e14e      	b.n	8003cce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d003      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2205      	movs	r2, #5
 8003a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	887a      	ldrh	r2, [r7, #2]
 8003a54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	887a      	ldrh	r2, [r7, #2]
 8003a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	887a      	ldrh	r2, [r7, #2]
 8003a66:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d007      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa0:	d178      	bne.n	8003b94 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x10a>
 8003aaa:	8b7b      	ldrh	r3, [r7, #26]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d166      	bne.n	8003b7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad4:	e053      	b.n	8003b7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d11b      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x176>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x176>
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d113      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	1c9a      	adds	r2, r3, #2
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d119      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x1b8>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d014      	beq.n	8003b5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b5e:	f7fe fd81 	bl	8002664 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d807      	bhi.n	8003b7e <HAL_SPI_TransmitReceive+0x1d8>
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d003      	beq.n	8003b7e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b7c:	e0a7      	b.n	8003cce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1a6      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x130>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1a1      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x130>
 8003b92:	e07c      	b.n	8003c8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x1fc>
 8003b9c:	8b7b      	ldrh	r3, [r7, #26]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d16b      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bc8:	e057      	b.n	8003c7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d11c      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x26c>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <HAL_SPI_TransmitReceive+0x26c>
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d114      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 8003bf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d119      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x2ae>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d014      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c50:	2301      	movs	r3, #1
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c54:	f7fe fd06 	bl	8002664 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d803      	bhi.n	8003c6c <HAL_SPI_TransmitReceive+0x2c6>
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x2cc>
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c78:	e029      	b.n	8003cce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1a2      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x224>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d19d      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f8b2 	bl	8003dfc <SPI_EndRxTxTransaction>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d006      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003caa:	e010      	b.n	8003cce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	e000      	b.n	8003cce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ccc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3730      	adds	r7, #48	; 0x30
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cfc:	f7fe fcb2 	bl	8002664 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	4413      	add	r3, r2
 8003d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d0c:	f7fe fcaa 	bl	8002664 <HAL_GetTick>
 8003d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d12:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	015b      	lsls	r3, r3, #5
 8003d18:	0d1b      	lsrs	r3, r3, #20
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d22:	e054      	b.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2a:	d050      	beq.n	8003dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2c:	f7fe fc9a 	bl	8002664 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d902      	bls.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d13d      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5a:	d111      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d64:	d004      	beq.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d107      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d10f      	bne.n	8003daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e017      	b.n	8003dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	bf0c      	ite	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	2300      	movne	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	79fb      	ldrb	r3, [r7, #7]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d19b      	bne.n	8003d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	2000003c 	.word	0x2000003c

08003dfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e08:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <SPI_EndRxTxTransaction+0x7c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <SPI_EndRxTxTransaction+0x80>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0d5b      	lsrs	r3, r3, #21
 8003e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e18:	fb02 f303 	mul.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e26:	d112      	bne.n	8003e4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff ff5a 	bl	8003cec <SPI_WaitFlagStateUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e00f      	b.n	8003e6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d0f2      	beq.n	8003e4e <SPI_EndRxTxTransaction+0x52>
 8003e68:	e000      	b.n	8003e6c <SPI_EndRxTxTransaction+0x70>
        break;
 8003e6a:	bf00      	nop
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000003c 	.word	0x2000003c
 8003e7c:	165e9f81 	.word	0x165e9f81

08003e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e03f      	b.n	8003f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe fb04 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f829 	bl	8003f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f20:	b09f      	sub	sp, #124	; 0x7c
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f32:	68d9      	ldr	r1, [r3, #12]
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	ea40 0301 	orr.w	r3, r0, r1
 8003f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f60:	f021 010c 	bic.w	r1, r1, #12
 8003f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7a:	6999      	ldr	r1, [r3, #24]
 8003f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	ea40 0301 	orr.w	r3, r0, r1
 8003f84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4bc5      	ldr	r3, [pc, #788]	; (80042a0 <UART_SetConfig+0x384>)
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d004      	beq.n	8003f9a <UART_SetConfig+0x7e>
 8003f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4bc3      	ldr	r3, [pc, #780]	; (80042a4 <UART_SetConfig+0x388>)
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d103      	bne.n	8003fa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9a:	f7ff f817 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8003f9e:	6778      	str	r0, [r7, #116]	; 0x74
 8003fa0:	e002      	b.n	8003fa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fa2:	f7fe ffff 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8003fa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	f040 80b6 	bne.w	8004120 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb6:	461c      	mov	r4, r3
 8003fb8:	f04f 0500 	mov.w	r5, #0
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	6439      	str	r1, [r7, #64]	; 0x40
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fcc:	1912      	adds	r2, r2, r4
 8003fce:	eb45 0303 	adc.w	r3, r5, r3
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	00d9      	lsls	r1, r3, #3
 8003fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fe0:	00d0      	lsls	r0, r2, #3
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	1911      	adds	r1, r2, r4
 8003fe8:	6639      	str	r1, [r7, #96]	; 0x60
 8003fea:	416b      	adcs	r3, r5
 8003fec:	667b      	str	r3, [r7, #100]	; 0x64
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	1891      	adds	r1, r2, r2
 8003ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ffc:	415b      	adcs	r3, r3
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004004:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004008:	f7fc fc0a 	bl	8000820 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4ba5      	ldr	r3, [pc, #660]	; (80042a8 <UART_SetConfig+0x38c>)
 8004012:	fba3 2302 	umull	r2, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	011e      	lsls	r6, r3, #4
 800401a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401c:	461c      	mov	r4, r3
 800401e:	f04f 0500 	mov.w	r5, #0
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	1891      	adds	r1, r2, r2
 8004028:	6339      	str	r1, [r7, #48]	; 0x30
 800402a:	415b      	adcs	r3, r3
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004032:	1912      	adds	r2, r2, r4
 8004034:	eb45 0303 	adc.w	r3, r5, r3
 8004038:	f04f 0000 	mov.w	r0, #0
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	00d9      	lsls	r1, r3, #3
 8004042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004046:	00d0      	lsls	r0, r2, #3
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	1911      	adds	r1, r2, r4
 800404e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004050:	416b      	adcs	r3, r5
 8004052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	461a      	mov	r2, r3
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	1891      	adds	r1, r2, r2
 8004060:	62b9      	str	r1, [r7, #40]	; 0x28
 8004062:	415b      	adcs	r3, r3
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800406a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800406e:	f7fc fbd7 	bl	8000820 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4b8c      	ldr	r3, [pc, #560]	; (80042a8 <UART_SetConfig+0x38c>)
 8004078:	fba3 1302 	umull	r1, r3, r3, r2
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	2164      	movs	r1, #100	; 0x64
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	3332      	adds	r3, #50	; 0x32
 800408a:	4a87      	ldr	r2, [pc, #540]	; (80042a8 <UART_SetConfig+0x38c>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004098:	441e      	add	r6, r3
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	4618      	mov	r0, r3
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	1894      	adds	r4, r2, r2
 80040a8:	623c      	str	r4, [r7, #32]
 80040aa:	415b      	adcs	r3, r3
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040b2:	1812      	adds	r2, r2, r0
 80040b4:	eb41 0303 	adc.w	r3, r1, r3
 80040b8:	f04f 0400 	mov.w	r4, #0
 80040bc:	f04f 0500 	mov.w	r5, #0
 80040c0:	00dd      	lsls	r5, r3, #3
 80040c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040c6:	00d4      	lsls	r4, r2, #3
 80040c8:	4622      	mov	r2, r4
 80040ca:	462b      	mov	r3, r5
 80040cc:	1814      	adds	r4, r2, r0
 80040ce:	653c      	str	r4, [r7, #80]	; 0x50
 80040d0:	414b      	adcs	r3, r1
 80040d2:	657b      	str	r3, [r7, #84]	; 0x54
 80040d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	461a      	mov	r2, r3
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	1891      	adds	r1, r2, r2
 80040e0:	61b9      	str	r1, [r7, #24]
 80040e2:	415b      	adcs	r3, r3
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040ee:	f7fc fb97 	bl	8000820 <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <UART_SetConfig+0x38c>)
 80040f8:	fba3 1302 	umull	r1, r3, r3, r2
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	2164      	movs	r1, #100	; 0x64
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	3332      	adds	r3, #50	; 0x32
 800410a:	4a67      	ldr	r2, [pc, #412]	; (80042a8 <UART_SetConfig+0x38c>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	f003 0207 	and.w	r2, r3, #7
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4432      	add	r2, r6
 800411c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800411e:	e0b9      	b.n	8004294 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004122:	461c      	mov	r4, r3
 8004124:	f04f 0500 	mov.w	r5, #0
 8004128:	4622      	mov	r2, r4
 800412a:	462b      	mov	r3, r5
 800412c:	1891      	adds	r1, r2, r2
 800412e:	6139      	str	r1, [r7, #16]
 8004130:	415b      	adcs	r3, r3
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004138:	1912      	adds	r2, r2, r4
 800413a:	eb45 0303 	adc.w	r3, r5, r3
 800413e:	f04f 0000 	mov.w	r0, #0
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	00d9      	lsls	r1, r3, #3
 8004148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800414c:	00d0      	lsls	r0, r2, #3
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	eb12 0804 	adds.w	r8, r2, r4
 8004156:	eb43 0905 	adc.w	r9, r3, r5
 800415a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	f04f 0100 	mov.w	r1, #0
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	008b      	lsls	r3, r1, #2
 800416e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004172:	0082      	lsls	r2, r0, #2
 8004174:	4640      	mov	r0, r8
 8004176:	4649      	mov	r1, r9
 8004178:	f7fc fb52 	bl	8000820 <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <UART_SetConfig+0x38c>)
 8004182:	fba3 2302 	umull	r2, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	011e      	lsls	r6, r3, #4
 800418a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418c:	4618      	mov	r0, r3
 800418e:	f04f 0100 	mov.w	r1, #0
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	1894      	adds	r4, r2, r2
 8004198:	60bc      	str	r4, [r7, #8]
 800419a:	415b      	adcs	r3, r3
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a2:	1812      	adds	r2, r2, r0
 80041a4:	eb41 0303 	adc.w	r3, r1, r3
 80041a8:	f04f 0400 	mov.w	r4, #0
 80041ac:	f04f 0500 	mov.w	r5, #0
 80041b0:	00dd      	lsls	r5, r3, #3
 80041b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041b6:	00d4      	lsls	r4, r2, #3
 80041b8:	4622      	mov	r2, r4
 80041ba:	462b      	mov	r3, r5
 80041bc:	1814      	adds	r4, r2, r0
 80041be:	64bc      	str	r4, [r7, #72]	; 0x48
 80041c0:	414b      	adcs	r3, r1
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f04f 0100 	mov.w	r1, #0
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	008b      	lsls	r3, r1, #2
 80041d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041dc:	0082      	lsls	r2, r0, #2
 80041de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80041e2:	f7fc fb1d 	bl	8000820 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <UART_SetConfig+0x38c>)
 80041ec:	fba3 1302 	umull	r1, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	2164      	movs	r1, #100	; 0x64
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	3332      	adds	r3, #50	; 0x32
 80041fe:	4a2a      	ldr	r2, [pc, #168]	; (80042a8 <UART_SetConfig+0x38c>)
 8004200:	fba2 2303 	umull	r2, r3, r2, r3
 8004204:	095b      	lsrs	r3, r3, #5
 8004206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420a:	441e      	add	r6, r3
 800420c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800420e:	4618      	mov	r0, r3
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	1894      	adds	r4, r2, r2
 800421a:	603c      	str	r4, [r7, #0]
 800421c:	415b      	adcs	r3, r3
 800421e:	607b      	str	r3, [r7, #4]
 8004220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004224:	1812      	adds	r2, r2, r0
 8004226:	eb41 0303 	adc.w	r3, r1, r3
 800422a:	f04f 0400 	mov.w	r4, #0
 800422e:	f04f 0500 	mov.w	r5, #0
 8004232:	00dd      	lsls	r5, r3, #3
 8004234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004238:	00d4      	lsls	r4, r2, #3
 800423a:	4622      	mov	r2, r4
 800423c:	462b      	mov	r3, r5
 800423e:	eb12 0a00 	adds.w	sl, r2, r0
 8004242:	eb43 0b01 	adc.w	fp, r3, r1
 8004246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4618      	mov	r0, r3
 800424c:	f04f 0100 	mov.w	r1, #0
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	008b      	lsls	r3, r1, #2
 800425a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800425e:	0082      	lsls	r2, r0, #2
 8004260:	4650      	mov	r0, sl
 8004262:	4659      	mov	r1, fp
 8004264:	f7fc fadc 	bl	8000820 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <UART_SetConfig+0x38c>)
 800426e:	fba3 1302 	umull	r1, r3, r3, r2
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2164      	movs	r1, #100	; 0x64
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	3332      	adds	r3, #50	; 0x32
 8004280:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <UART_SetConfig+0x38c>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	f003 020f 	and.w	r2, r3, #15
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4432      	add	r2, r6
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	bf00      	nop
 8004296:	377c      	adds	r7, #124	; 0x7c
 8004298:	46bd      	mov	sp, r7
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop
 80042a0:	40011000 	.word	0x40011000
 80042a4:	40011400 	.word	0x40011400
 80042a8:	51eb851f 	.word	0x51eb851f

080042ac <__libc_init_array>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4d0d      	ldr	r5, [pc, #52]	; (80042e4 <__libc_init_array+0x38>)
 80042b0:	4c0d      	ldr	r4, [pc, #52]	; (80042e8 <__libc_init_array+0x3c>)
 80042b2:	1b64      	subs	r4, r4, r5
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	2600      	movs	r6, #0
 80042b8:	42a6      	cmp	r6, r4
 80042ba:	d109      	bne.n	80042d0 <__libc_init_array+0x24>
 80042bc:	4d0b      	ldr	r5, [pc, #44]	; (80042ec <__libc_init_array+0x40>)
 80042be:	4c0c      	ldr	r4, [pc, #48]	; (80042f0 <__libc_init_array+0x44>)
 80042c0:	f000 f820 	bl	8004304 <_init>
 80042c4:	1b64      	subs	r4, r4, r5
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	2600      	movs	r6, #0
 80042ca:	42a6      	cmp	r6, r4
 80042cc:	d105      	bne.n	80042da <__libc_init_array+0x2e>
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d4:	4798      	blx	r3
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7ee      	b.n	80042b8 <__libc_init_array+0xc>
 80042da:	f855 3b04 	ldr.w	r3, [r5], #4
 80042de:	4798      	blx	r3
 80042e0:	3601      	adds	r6, #1
 80042e2:	e7f2      	b.n	80042ca <__libc_init_array+0x1e>
 80042e4:	08006514 	.word	0x08006514
 80042e8:	08006514 	.word	0x08006514
 80042ec:	08006514 	.word	0x08006514
 80042f0:	08006518 	.word	0x08006518

080042f4 <memset>:
 80042f4:	4402      	add	r2, r0
 80042f6:	4603      	mov	r3, r0
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <_init>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	bf00      	nop
 8004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430a:	bc08      	pop	{r3}
 800430c:	469e      	mov	lr, r3
 800430e:	4770      	bx	lr

08004310 <_fini>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr
